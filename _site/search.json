[
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html",
    "href": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "Note: Please toggle between ‘Show’ and ‘Hide’ above based on your preference for viewing the R codes."
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#loading-packages",
    "href": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#loading-packages",
    "title": "Take Home Exercise 2",
    "section": "3.1 Loading packages",
    "text": "3.1 Loading packages\nThe following R packages were loaded using the pacman::p_load() function.\n\ntidyverse – Data manipulation and plotting\njsonlite – Parsing JSON files\nSmartEDA – Exploratory data analysis\nggrepel – Prevent overlapping text labels in plots\nggthemes – Additional ggplot2 themes\nggridges / ggdist – Density and distribution plots\ncolorspace / scales – Color and scale customization\ndplyr, lubridate – Tidy data transformation and date handling\npatchwork – Combining multiple ggplots\nmatrixStats – Efficient statistical functions for matrices\ntreemapify – Treemap visualizations\nshowtext – Custom font support in plots\nigraph, ggraph, tidygraph – Network and graph analysis\nnaniar – Missing data visualization\nreadr – Fast CSV and delimited file reading\nvisNetwork – Interactive network graphs\n\n\n\nCode\npacman::p_load(tidyverse, jsonlite, ggrepel, ggdist, lubridate,\n               ggdist, scales, ggplot2, treemapify, igraph, ggraph, \n               tidygraph, readr, visNetwork, ggrepel, janitor, gganimate, dplyr)"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#importing-data",
    "href": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#importing-data",
    "title": "Take Home Exercise 2",
    "section": "3.2 Importing Data",
    "text": "3.2 Importing Data\nWe begin by importing the cleaned knowledge graph from the MC1_graph.json file, which contains nodes and edges representing artists, songs, genres, and relationships such as collaborations and influence.\n\n\nCode\n# Load the JSON file\nkg &lt;- fromJSON(\"MC1/data/MC1_graph.json\")\n\n# Convert to data frames\nnodes_tbl &lt;- bind_rows(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links)\n\ncolnames(nodes_tbl)\n\n\n [1] \"Node Type\"      \"name\"           \"single\"         \"release_date\"  \n [5] \"genre\"          \"notable\"        \"id\"             \"written_date\"  \n [9] \"stage_name\"     \"notoriety_date\"\n\n\nCode\ncolnames(edges_tbl)\n\n\n[1] \"Edge Type\" \"source\"    \"target\"    \"key\"      \n\n\nCode\nstr(nodes_tbl)\n\n\n'data.frame':   17412 obs. of  10 variables:\n $ Node Type     : chr  \"Song\" \"Person\" \"Person\" \"Person\" ...\n $ name          : chr  \"Breaking These Chains\" \"Carlos Duffy\" \"Min Qin\" \"Xiuying Xie\" ...\n $ single        : logi  TRUE NA NA NA NA FALSE ...\n $ release_date  : chr  \"2017\" NA NA NA ...\n $ genre         : chr  \"Oceanus Folk\" NA NA NA ...\n $ notable       : logi  TRUE NA NA NA NA TRUE ...\n $ id            : int  0 1 2 3 4 5 6 7 8 9 ...\n $ written_date  : chr  NA NA NA NA ...\n $ stage_name    : chr  NA NA NA NA ...\n $ notoriety_date: chr  NA NA NA NA ..."
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#distribution-of-edge-types",
    "href": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#distribution-of-edge-types",
    "title": "Take Home Exercise 2",
    "section": "4.1 Distribution of Edge Types",
    "text": "4.1 Distribution of Edge Types\nThe dataset contains a variety of edge types, each representing a specific relationship such as PerformerOf, CollaboratedWith, InspiredBy, and RecordedBy. The distribution shows that performance and composition-based connections dominate the network, suggesting a strong emphasis on how artists contribute to songs and collaborate with each other. Edges like InspiredBy and InterpolatesFrom are crucial for tracking the influence of Oceanus Folk across genres and over time.\n\n\nCode\nggplot(data = edges_tbl, aes(y = `Edge Type`)) + \n  geom_bar(fill = \"#73112d\") +\n  labs(\n    title = \"Distribution of Edge Types\",\n    y = \"Edge Type\",\n    x = \"Count\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#distribution-of-node-types",
    "href": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#distribution-of-node-types",
    "title": "Take Home Exercise 2",
    "section": "4.2 Distribution of Node Types",
    "text": "4.2 Distribution of Node Types\nNodes in the graph are categorized into types such as Person, Song, Genre, RecordLabel, and Album. The largest share belongs to Person and Song, which aligns with the network’s purpose of mapping artistic contributions and collaborations. This diversity allows for nuanced exploration - from individual artists to genre evolution and production labels.\n\n\nCode\nggplot(data = nodes_tbl, aes(y = `Node Type`)) + \n  geom_bar(fill = \"#2d7311\") +\n  labs(\n    title = \"Distribution of Node Types\",\n    y = \"Node Type\",\n    x = \"Count\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#unique-entities-by-node-type",
    "href": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#unique-entities-by-node-type",
    "title": "Take Home Exercise 2",
    "section": "4.3 Unique Entities by Node Type",
    "text": "4.3 Unique Entities by Node Type\nThis breakdown highlights the count of distinct entities within each node type. For example, we observe a high number of unique songs and artists, with relatively fewer genres and record labels. This reinforces the network’s depth in capturing individual creative works and their contributors, while also showing the limited but important role of overarching categories like genre.\n\n\nCode\nnodes_tbl %&gt;%\n  group_by(`Node Type`) %&gt;%\n  summarise(`Number of Entities` = n()) %&gt;%\n  arrange(desc(`Number of Entities`)) %&gt;%\n  ggplot(aes(x = reorder(`Node Type`, `Number of Entities`), y = `Number of Entities`)) +\n  geom_col(fill = \"#112d73\") +\n  coord_flip() +\n  labs(\n    title = \"Number of Unique Entities by Node Type\",\n    x = \"Node Type\",\n    y = \"Count\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#spread-of-oceanus-folks-influence-over-time",
    "href": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#spread-of-oceanus-folks-influence-over-time",
    "title": "Take Home Exercise 2",
    "section": "6.1 Spread of Oceanus Folk’s Influence Over Time",
    "text": "6.1 Spread of Oceanus Folk’s Influence Over Time\nTo assess how the influence of Oceanus Folk evolved, we visualized the number of songs influenced by the genre across different years. The results showed a gradual and consistent rise in influence peaking in the mid 2020s. This trend suggests that Oceanus Folk’s impact was not sporadic, but steadily gained momentum over time, likely propelled by Sailor’s growing popularity and sustained collaborations with artists across multiple genres.\n\n\nCode\nnodes &lt;- read_csv(\"nodes_cleaned.csv\")\n\n# Filter Oceanus Folk songs with valid release dates\noceanus_songs &lt;- nodes %&gt;%\n  filter(node_type == \"Song\", genre == \"Oceanus Folk\", !is.na(release_date))\n\n# Create new column for release year\noceanus_songs &lt;- oceanus_songs %&gt;%\n  mutate(release_year = as.integer(release_date))\n\n# Count number of Oceanus Folk songs per year\nsongs_by_year &lt;- oceanus_songs %&gt;%\n  group_by(release_year) %&gt;%\n  summarise(n = n(), .groups = \"drop\")\n\n# Plot\nggplot(songs_by_year, aes(x = release_year, y = n)) +\n  geom_col(fill = \"#112d73\", width = 0.6) +\n  geom_text(aes(label = n), vjust = -0.3, size = 3, color = \"black\") +\n  scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +\n  labs(\n    title = \"Oceanus Folk Song Releases Over Time\",\n    subtitle = \"Count of Oceanus Folk song releases over the years\",\n    x = \"Release Year\",\n    y = \"Number of Songs\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 14),\n    plot.subtitle = element_text(size = 11),\n    axis.title.y = element_text(margin = margin(r = 10))\n  )\n\n\n\n\n\n\n\n\n\n\n\nCode\nnodes_tbl &lt;- read_csv(\"nodes_cleaned.csv\")\nedges_tbl &lt;- read_csv(\"edges_cleaned.csv\")\nnodes_tbl &lt;- as_tibble(nodes_tbl)\nedges_tbl &lt;- as_tibble(edges_tbl)\n\n# Create ID to index mapping\nid_map &lt;- tibble(id = nodes_tbl$id, index = seq_len(nrow(nodes_tbl)))\n\n# Join mapping to edges\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from_index = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to_index = index) %&gt;%\n  filter(!is.na(from_index), !is.na(to_index))\n\n# Creating graph\ngraph &lt;- tbl_graph(\n  nodes = nodes_tbl,\n  edges = edges_tbl %&gt;% select(from = from_index, to = to_index, everything()),\n  directed = TRUE\n)\n\n# Filter to Oceanus Folk\ngraph_oceanus &lt;- graph %&gt;%\n  activate(nodes) %&gt;%\n  filter(str_detect(genre, \"Oceanus Folk\"))\n\n# Step 7: Visualization\nggraph(graph_oceanus, layout = \"fr\") +\n  geom_edge_link(alpha = 0.2, color = \"gray\") +\n  geom_node_point(aes(color = node_type), size = 3) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 2.5) +\n  theme_void() +\n  labs(title = \"Influence of Oceanus Folk\")\n\n\n\n\n\n\n\n\n\nCode\n# Extract Oceanus Folk node IDs\noceanus_ids &lt;- nodes_tbl %&gt;%\n  filter(str_detect(genre, \"Oceanus Folk\")) %&gt;%\n  pull(id)\n\nedges_oceanus &lt;- edges_tbl %&gt;%\n  filter(source %in% oceanus_ids | target %in% oceanus_ids)\n\n# VisNetwork\nnodes_vis &lt;- nodes_tbl %&gt;%\n  filter(id %in% c(edges_oceanus$source, edges_oceanus$target)) %&gt;%\n  mutate(label = name,\n         title = paste0(\"&lt;b&gt;\", name, \"&lt;/b&gt;&lt;br&gt;Type: \", node_type, \"&lt;br&gt;Genre: \", genre),\n         color = case_when(\n           node_type == \"Person\" ~ \"#112d73\",\n           node_type == \"Song\" ~ \"#2d7311\",\n           node_type == \"Genre\" ~ \"#73112d\",\n           TRUE ~ \"#aaaaaa\"\n         )) %&gt;%\n  select(id, label, title, color)\n\nedges_vis &lt;- edges_oceanus %&gt;%\n  select(from = source, to = target, label = edge_type)\n\nvisNetwork(nodes_vis, edges_vis, width = \"100%\", height = \"700px\") %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 42) %&gt;%\n  visPhysics(stabilization = TRUE) %&gt;%\n  visLegend(addNodes = list(\n    list(label = \"Person\", color = \"#112d73\"),\n    list(label = \"Song\", color = \"#2d7311\"),\n    list(label = \"Genre\", color = \"#73112d\")\n  ), useGroups = FALSE)"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#genres-and-top-artists-influenced-by-oceanus-folk",
    "href": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#genres-and-top-artists-influenced-by-oceanus-folk",
    "title": "Take Home Exercise 2",
    "section": "6.2 Genres and Top Artists Influenced by Oceanus Folk",
    "text": "6.2 Genres and Top Artists Influenced by Oceanus Folk\nWe explored which genres and artists were most influenced by Oceanus Folk by analyzing InspiredBy and InterpolatesFrom edge relationships in the graph. A bar chart highlighted Indie Folk, Indie Rock, and Alternative Rock as top recipient genres of Oceanus Folk influence. In parallel, a dot plot showed the top individual artists repeatedly influenced, reinforcing the genre’s broad reach. These findings underscore how Oceanus Folk, once niche, became a key source of inspiration across several popular and evolving musical styles.\n\n\nCode\nnodes_tbl &lt;- read_csv(\"nodes_cleaned.csv\")\nedges_tbl &lt;- read_csv(\"edges_cleaned.csv\")\nnodes_tbl &lt;- as_tibble(nodes_tbl)\nedges_tbl &lt;- as_tibble(edges_tbl)\n\n# Create ID-to-index map and re-index edges\nid_map &lt;- tibble(id = nodes_tbl$id, index = seq_len(nrow(nodes_tbl)))\n\nleft_join &lt;- dplyr::left_join\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from_index = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to_index = index) %&gt;%\n  filter(!is.na(from_index), !is.na(to_index))\n\n# Create tbl_graph object\ngraph &lt;- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl %&gt;% select(from = from_index, to = to_index, everything()),\n                   directed = TRUE)\n\n# Get Oceanus Folk nodes songs/artists\noceanus_nodes &lt;- nodes_tbl %&gt;%\n  filter(str_detect(genre, regex(\"Oceanus Folk\", ignore_case = TRUE)))\n\n# Influenced edges from Oceanus Folk\ninfluenced_edges &lt;- edges_tbl %&gt;%\n  filter(edge_type %in% c(\"influenced\", \"InterpolatedFrom\", \"InStyleOf\")) %&gt;%\n  filter(source %in% oceanus_nodes$id)\n\ninfluenced_ids &lt;- influenced_edges$target\n\ninfluenced_nodes &lt;- nodes_tbl %&gt;%\n  filter(id %in% influenced_ids)\n\n# Plot graph\ninfluenced_nodes %&gt;%\n  filter(!is.na(genre)) %&gt;%\n  group_by(genre) %&gt;%\n  summarise(n = n()) %&gt;%\n  arrange(desc(n)) %&gt;%\n  slice_max(n, n = 10) %&gt;%\n  ggplot(aes(x = reorder(genre, n), y = n)) +\n  geom_col(fill = \"#73112d\") +\n  coord_flip() +\n  labs(title = \"Top 10 Genres Influenced by Oceanus Folk\",\n       x = \"Genre\", y = \"Number of Influenced Nodes\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nCode\nnodes_graph &lt;- nodes %&gt;%\n  mutate(index = row_number())\n\nedges_graph &lt;- edges %&gt;%\n  left_join(nodes_graph %&gt;% select(id, source_index = index), by = c(\"source\" = \"id\")) %&gt;%\n  left_join(nodes_graph %&gt;% select(id, target_index = index), by = c(\"target\" = \"id\")) %&gt;%\n  filter(!is.na(source_index), !is.na(target_index)) %&gt;%\n  filter(source_index &lt;= nrow(nodes_graph), target_index &lt;= nrow(nodes_graph))\n\ngraph &lt;- tbl_graph(\n  nodes = nodes_graph,\n  edges = edges_graph %&gt;% select(source = source_index, target = target_index, edge_type),\n  directed = TRUE\n)\n\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(aes(color = edge_type), alpha = 0.5) +\n  geom_node_point(aes(color = genre), size = 3) +\n  geom_node_text(aes(label = ifelse(name == \"Sailor Shift\", name, NA)), repel = TRUE, size = 4) +\n  labs(title = \"Oceanus Folk Influence Network\") +\n  theme_void()"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#the-evolution-of-oceanus-folk",
    "href": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#the-evolution-of-oceanus-folk",
    "title": "Take Home Exercise 2",
    "section": "6.3 The Evolution of Oceanus Folk",
    "text": "6.3 The Evolution of Oceanus Folk\nTo understand how Oceanus Folk itself has changed over time, we traced the genres of songs and artists that influenced newer Oceanus Folk tracks. Our network and bar plots revealed that Sailor Shift’s collaborations often drew from Indie Pop, Doom Metal genres. These cross-genre influences indicate a transformation in Oceanus Folk’s sound — blending its traditional roots with more modern, eclectic styles. Sailor’s artistic direction appears to have expanded the genre’s boundaries while maintaining its core identity.\n\n\nCode\n# Load data\nnodes &lt;- read_csv(\"nodes_cleaned.csv\")\nedges &lt;- read_csv(\"edges_cleaned.csv\")\n\n\n# Get Oceanus Folk song IDs\nof_ids &lt;- nodes %&gt;%\n  filter(node_type == \"Song\", genre == \"Oceanus Folk\") %&gt;%\n  pull(id)\n\n# Filter and enrich influence edges with release year\nedges_influence &lt;- edges %&gt;%\n  filter(source %in% of_ids, edge_type %in% c(\"InspiredBy\", \"InterpolatesFrom\")) %&gt;%\n  left_join(nodes %&gt;% select(id, release_date), by = c(\"source\" = \"id\")) %&gt;%\n  mutate(year = floor(as.numeric(release_date))) %&gt;%\n  arrange(year)\n\n# Subset relevant nodes and assign index\nused_ids &lt;- unique(c(edges_influence$source, edges_influence$target))\nnodes_sub &lt;- nodes %&gt;%\n  filter(id %in% used_ids) %&gt;%\n  mutate(index = row_number()) %&gt;%\n  select(index, id, name, node_type, genre, everything())\n\n# Reindex edges using node indices\nedges_sub &lt;- edges_influence %&gt;%\n  left_join(nodes_sub %&gt;% select(id, source_index = index), by = c(\"source\" = \"id\")) %&gt;%\n  left_join(nodes_sub %&gt;% select(id, target_index = index), by = c(\"target\" = \"id\")) %&gt;%\n  filter(!is.na(source_index), !is.na(target_index)) %&gt;%\n  select(source = source_index, target = target_index, edge_type, year)\n\n# Build temporal graph and compute out-degree\ngraph_time &lt;- tbl_graph(nodes = nodes_sub, edges = edges_sub, directed = TRUE) %&gt;%\n  mutate(out_degree = centrality_degree(mode = \"out\"))\n\n# Create animated plot\np &lt;- graph_time %&gt;%\n  activate(edges) %&gt;%\n  mutate(year = factor(year)) %&gt;%\n  ggraph(layout = \"circle\") +\n  geom_edge_link(aes(color = year), alpha = 0.5, arrow = arrow(length = unit(2, 'mm'))) +\n  geom_node_point(aes(size = out_degree, color = node_type), alpha = 0.7) +\n  geom_node_text(\n  aes(label = ifelse(out_degree &gt; quantile(out_degree, 0.90, na.rm = TRUE),\n                     name, NA)),size = 3,repel = TRUE) +\n  scale_color_manual(values = c(\"Person\" = \"#73112D\", \"Song\" = \"#112d73\", \"Genre\" = \"#2d7311\")) +\n  labs(title = \"Influence of Oceanus Folk Over Time: {closest_state}\") +\n  theme_void() +\n  enter_fade() +\n  exit_fade() +\n  transition_states(year, transition_length = 2, state_length = 1)\n\n# Render animation to GIF\n# gif_path &lt;- \"oceanus_influence.gif\"\n# animate(p, renderer = gifski_renderer(gif_path), width = 800, height = 800, fps = 4)\n# cat(sprintf('![](%s)', gif_path))\n\n\n\nThis animated network graph illustrates how songs in the Oceanus Folk genre have influenced other artists and genres over time. Nodes represent individuals or genres, with node size corresponding to out-degree centrality - a proxy for influence. Each frame represents a year based on song release dates, revealing how Oceanus Folk’s reach expanded into global music networks."
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex03/TakeHomeEx03.html",
    "href": "TakeHome_Exercises/TakeHome_Ex03/TakeHomeEx03.html",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Note: Please toggle between ‘Show’ and ‘Hide’ above based on your preference for viewing the R codes.\n\n1.1 Setting the Scene"
  }
]