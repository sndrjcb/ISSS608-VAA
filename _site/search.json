[
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex03/TakeHomeEx03.html",
    "href": "TakeHome_Exercises/TakeHome_Ex03/TakeHomeEx03.html",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Note: Please toggle between ‘Show’ and ‘Hide’ above based on your preference for viewing the R codes."
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex03/TakeHomeEx03.html#exploratory-data-analysis-eda",
    "href": "TakeHome_Exercises/TakeHome_Ex03/TakeHomeEx03.html#exploratory-data-analysis-eda",
    "title": "Take Home Exercise 3",
    "section": "3.3.1 Exploratory Data Analysis (EDA)",
    "text": "3.3.1 Exploratory Data Analysis (EDA)\n\nPurpose\nTo provide an interactive overview of the Oceanus Folk ecosystem, including its core components - artists, genres, songs, and how they are interconnected over time.\n\n\nKey Features\n\nBar Chart: Number of Oceanus Folk songs released per year.\nStacked Bar Chart: Distribution of genres over time to track diversity and changes in music style.\nInteractive visNetwork Graph: Explore the influence network visually with tooltips and filtering options by genre and year.\nSidebar Controls: Allow users to filter by selected genres and adjust year ranges to refine the visualizations.\n\n\n\nUI Screen\nThis module helps users intuitively explore the growth and composition of Oceanus Folk, discover artist or genre clusters, and understand the structural spread of influence through the music network.\n\n\n\nCode\n\n\nCode\nui &lt;- fluidPage(\n  titlePanel(\"Exploratory Data Analysis: Oceanus Folk Knowledge Graph\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"genre_select\", \"Select Genre:\",\n                  choices = NULL, multiple = TRUE),\n      \n      sliderInput(\"year_range\", \"Select Year Range:\",\n                  min = 2000, max = 2040, value = c(2020, 2040), sep = \"\")\n    ),\n    \n    mainPanel(\n      tabsetPanel(\n        tabPanel(\"Bar Charts\",\n                 plotOutput(\"songs_by_year\"),\n                 plotOutput(\"genres_over_time\")\n        ),\n        \n        tabPanel(\"Composition\",\n                 plotOutput(\"node_composition\")\n        ),\n        \n        tabPanel(\"Network Graph\",\n                 visNetworkOutput(\"network_graph\", height = \"600px\")\n        )\n      )\n    )\n  )\n)\nserver &lt;- function(input, output, session) {\n  \n  # Dynamic filtering based on genre and year\n  filtered_nodes &lt;- reactive({\n    req(nodes)\n    nodes %&gt;%\n      filter(is.na(genre) | genre %in% input$genre_selector) %&gt;%\n      filter(is.na(release_date) | between(as.numeric(release_date), input$year_range[1], input$year_range[2]))\n  })\n  \n  filtered_edges &lt;- reactive({\n    req(edges)\n    edges %&gt;%\n      filter(source %in% filtered_nodes()$id & target %in% filtered_nodes()$id)\n  })\n  \n  # Oceanus Folk Songs by Year\n  output$song_release_plot &lt;- renderPlot({\n    oceanus_songs &lt;- nodes %&gt;%\n      filter(genre == \"Oceanus Folk\", !is.na(release_date)) %&gt;%\n      mutate(year = as.integer(release_date)) %&gt;%\n      count(year)\n    \n    ggplot(oceanus_songs, aes(x = year, y = n)) +\n      geom_col(fill = \"#1f78b4\") +\n      labs(title = \"Oceanus Folk Songs Released by Year\", x = \"Year\", y = \"Number of Songs\") +\n      theme_minimal()\n  })\n  \n  # Genre Distribution Over Time\n  output$genre_dist_plot &lt;- renderPlot({\n    genre_dist &lt;- nodes %&gt;%\n      filter(!is.na(genre), !is.na(release_date)) %&gt;%\n      mutate(year = as.integer(release_date)) %&gt;%\n      count(year, genre)\n    \n    ggplot(genre_dist, aes(x = year, y = n, fill = genre)) +\n      geom_col() +\n      labs(title = \"Genre Distribution Over Time\", x = \"Year\", y = \"Count\") +\n      theme_minimal()\n  })\n  \n  # Node Type Composition Pie Chart\n  output$node_type_pie &lt;- renderPlot({\n    node_type_count &lt;- nodes %&gt;%\n      count(node_type)\n    \n    ggplot(node_type_count, aes(x = \"\", y = n, fill = node_type)) +\n      geom_col(width = 1) +\n      coord_polar(theta = \"y\") +\n      theme_void() +\n      labs(title = \"Node Type Composition\")\n  })\n  \n  # Interactive visNetwork Graph\n  output$eda_network &lt;- renderVisNetwork({\n    req(filtered_nodes(), filtered_edges())\n    \n    visNetwork(filtered_nodes(), filtered_edges()) %&gt;%\n      visNodes(shape = \"dot\", size = 10) %&gt;%\n      visEdges(arrows = \"to\") %&gt;%\n      visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n      visLayout(randomSeed = 42)\n  })\n}"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex03/TakeHomeEx03.html#statistical-analysis",
    "href": "TakeHome_Exercises/TakeHome_Ex03/TakeHomeEx03.html#statistical-analysis",
    "title": "Take Home Exercise 3",
    "section": "3.3.2 Statistical Analysis",
    "text": "3.3.2 Statistical Analysis\n\nPurpose\nTo provide confirmatory insights into the evolution of Oceanus Folk’s influence across the music industry using statistical modeling and centrality metrics.\n\n\n3.3.2.1 Network Centrality Explorer\nThe goal is to identify key influencers, whether artists, genres, or songs, within the network.\n\nKey Features\n\nCentrality Type Selector: Out-degree, In-degree, Betweenness, Eigenvector.\nNode Type Filter: Focus on Artists, Songs, Genres, or view all.\nTop-N Slider: Choose how many top influencers to display (e.g., Top 10).\nInteractive Table: Displays node metadata with centrality scores.\nDot Plot: Visualizes rankings with hoverable data points.\nNode Summary Panel: View expanded information about selected nodes (e.g., Sailor Shift or Oceanus Folk genre hubs).\n\n\n\nUI Screen\n\n\n\nCode\n\n\nCode\n# Sample placeholder graph (replace with your real tbl_graph)\nsample_graph &lt;- play_gnp(n = 30, p = 0.1, directed = TRUE) %&gt;%\n  as_tbl_graph() %&gt;%\n  mutate(name = paste(\"Node\", 1:n()),\n         node_type = sample(c(\"Artist\", \"Song\", \"Genre\"), n(), replace = TRUE))\n\nui &lt;- fluidPage(\n  titlePanel(\"🎵 Network Centrality Explorer\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"centrality_type\", \"Select Centrality Type:\",\n                  choices = c(\"Out-degree\", \"In-degree\", \"Betweenness\", \"Eigenvector\")),\n      \n      radioButtons(\"node_filter\", \"Filter by Node Type:\",\n                   choices = c(\"All\", \"Artist\", \"Song\", \"Genre\"), inline = TRUE),\n      \n      sliderInput(\"top_n\", \"Top N Influencers:\", min = 5, max = 30, value = 10)\n    ),\n    \n    mainPanel(\n      DTOutput(\"centrality_table\"),\n      plotOutput(\"centrality_plot\", click = \"plot_click\"),\n      uiOutput(\"node_summary\")\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  reactive_graph &lt;- reactive({\n    g &lt;- sample_graph\n    \n    # Calculate centrality based on user input\n    V(g)$centrality &lt;- switch(input$centrality_type,\n                              \"Out-degree\" = degree(g, mode = \"out\"),\n                              \"In-degree\" = degree(g, mode = \"in\"),\n                              \"Betweenness\" = betweenness(g),\n                              \"Eigenvector\" = evcent(g)$vector\n    )\n    \n    g\n  })\n  \n  filtered_data &lt;- reactive({\n    g &lt;- reactive_graph()\n    g_tbl &lt;- as_tibble(g)\n    \n    g_tbl &lt;- g_tbl %&gt;%\n      mutate(centrality = V(g)$centrality)\n    \n    if (input$node_filter != \"All\") {\n      g_tbl &lt;- g_tbl %&gt;% filter(node_type == input$node_filter)\n    }\n    \n    g_tbl %&gt;% arrange(desc(centrality)) %&gt;% slice_head(n = input$top_n)\n  })\n  \n  output$centrality_table &lt;- renderDT({\n    datatable(filtered_data(), options = list(pageLength = 5))\n  })\n  \n  output$centrality_plot &lt;- renderPlot({\n    ggplot(filtered_data(), aes(x = reorder(name, centrality), y = centrality)) +\n      geom_point(shape = 4, size = 4, color = \"blue\") +\n      coord_flip() +\n      labs(title = paste(\"Top\", input$top_n, input$node_filter, \"by\", input$centrality_type),\n           x = \"\", y = \"Centrality Score\") +\n      theme_minimal()\n  })\n  \n  output$node_summary &lt;- renderUI({\n    click &lt;- input$plot_click\n    if (is.null(click)) return(NULL)\n    \n    nearest &lt;- nearPoints(filtered_data(), click, xvar = \"name\", yvar = \"centrality\", threshold = 20, maxpoints = 1)\n    if (nrow(nearest) == 0) return(NULL)\n    \n    wellPanel(\n      h4(\"Node Summary\"),\n      p(strong(\"Name: \"), nearest$name),\n      p(strong(\"Node Type: \"), nearest$node_type),\n      p(strong(\"Centrality Score: \"), round(nearest$centrality, 3))\n    )\n  })\n}\n\nshinyApp(ui, server)\n\n\n\n\n\n3.3.2.2 Influence Over Time\nThe goal is to examine how the influence of Oceanus Folk has evolved across years using statistical trends and hypothesis testing.\n\nKey Features\n\nYear Range Slider: Set temporal scope from 2000–2040.\nEdge Type Selector: Choose which influence types to include (e.g., InspiredBy, InterpolatesFrom).\nTime Series Plot: Displays yearly counts of influenced nodes (songs/artists).\nTrendline Toggle: Adds a fitted linear model to observe growth patterns.\nStatistical Output Panel: Presents the result of a linear regression (and potentially other tests like Mann-Kendall) to verify significant trends.\n\n\n\nUI Screen\n\n\n\nCode\n\n\nCode\nui &lt;- fluidPage(\n  titlePanel(\"Oceanus Folk Influence Over Time\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"year_range\", \"Select Year Range:\",\n                  min = 2000, max = 2040,\n                  value = c(2000, 2040), step = 1,\n                  sep = \"\"),\n      \n      checkboxGroupInput(\"edge_types\", \"Edge Types to Include:\",\n                         choices = c(\"InspiredBy\", \"InterpolatesFrom\", \"InStyleOf\"),\n                         selected = c(\"InspiredBy\", \"InterpolatesFrom\")),\n      \n      checkboxInput(\"show_trend\", \"Show Trendline\", value = TRUE),\n      actionButton(\"run_test\", \"Run Statistical Test\")\n    ),\n    \n    mainPanel(\n      plotOutput(\"influence_plot\", click = \"plot_click\"),\n      verbatimTextOutput(\"stat_test_result\")\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  \n  # Reactive expression for filtered data (placeholder)\n  filtered_data &lt;- reactive({\n    tibble(\n      year = 2000:2040,\n      count = sample(10:100, 41, replace = TRUE)\n    ) %&gt;%\n      filter(year &gt;= input$year_range[1], year &lt;= input$year_range[2])\n  })\n  \n  output$influence_plot &lt;- renderPlot({\n    data &lt;- filtered_data()\n    \n    p &lt;- ggplot(data, aes(x = year, y = count)) +\n      geom_line(color = \"#2C3E50\") +\n      geom_point(color = \"#18BC9C\") +\n      labs(title = \"Influence of Oceanus Folk Over Time\",\n           x = \"Year\",\n           y = \"Number of Influenced Nodes\") +\n      theme_minimal()\n    \n    if (input$show_trend) {\n      p &lt;- p + geom_smooth(method = \"lm\", se = FALSE, linetype = \"dashed\", color = \"#E74C3C\")\n    }\n    \n    p\n  })\n  \n  output$stat_test_result &lt;- renderPrint({\n    input$run_test  # trigger test on button press\n    \n    isolate({\n      data &lt;- filtered_data()\n      model &lt;- lm(count ~ year, data = data)\n      summary(model)\n    })\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex03/TakeHomeEx03.html#predictive-analysis",
    "href": "TakeHome_Exercises/TakeHome_Ex03/TakeHomeEx03.html#predictive-analysis",
    "title": "Take Home Exercise 3",
    "section": "3.3.3 Predictive Analysis",
    "text": "3.3.3 Predictive Analysis\n\nPurpose\nTo simulate future outcomes for lesser-known artists or genres based on historical influence patterns using simplified predictive models.\n\n\nKey Features\n\nUser Input: Choose whether to analyze by Artist or Genre.\nDynamic Field: Enter the name of the artist or genre to simulate.\nModel Selection: Toggle between Logistic Regression and Decision Tree for prediction.\nGenre Projection Plot: Visualizes expected influence growth over time.\nModel Result Panel: Displays prediction outcome based on input and selected model.\nArtist Trajectory Simulator: Simulates a future popularity trajectory (e.g., 2025–2040) based on influence links, genre, and collaborations.\n\n\n\nUI Screen\n\n\n\nCode\n\n\nCode\nui &lt;- fluidPage(\n  titlePanel(\"Predictive Analysis: Future Trends in Oceanus Folk\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"input_type\", \"Select Input Type:\",\n                  choices = c(\"Artist\", \"Genre\")),\n      \n      uiOutput(\"dynamic_input\"),\n      \n      radioButtons(\"model_type\", \"Choose Prediction Model:\",\n                   choices = c(\"Logistic Regression\", \"Decision Tree\"),\n                   selected = \"Logistic Regression\"),\n      \n      checkboxInput(\"show_projection\", \"Show Genre Growth Projection\", value = TRUE)\n    ),\n    \n    mainPanel(\n      conditionalPanel(\n        condition = \"input.show_projection == true\",\n        plotOutput(\"genre_projection\")\n      ),\n      \n      verbatimTextOutput(\"model_results\"),\n      \n      h4(\"Simulated Artist Trajectory\"),\n      plotOutput(\"artist_trajectory\")\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  \n  # Dynamically update input field\n  output$dynamic_input &lt;- renderUI({\n    if (input$input_type == \"Artist\") {\n      textInput(\"user_input\", \"Enter Artist Name:\", value = \"\")\n    } else {\n      textInput(\"user_input\", \"Enter Genre Name:\", value = \"\")\n    }\n  })\n  \n  # Placeholder projection plot\n  output$genre_projection &lt;- renderPlot({\n    years &lt;- 2025:2040\n    growth &lt;- cumsum(runif(length(years), min = 0, max = 10))\n    plot(years, growth, type = \"l\", col = \"steelblue\", lwd = 2,\n         xlab = \"Year\", ylab = \"Projected Influence\",\n         main = \"Projected Genre Influence Over Time\")\n  })\n  \n  # Placeholder model results\n  output$model_results &lt;- renderPrint({\n    paste(\"Model Type:\", input$model_type,\n          \"\\nInput:\", input$user_input,\n          \"\\nPrediction: Likely to rise in popularity\")\n  })\n  \n  # Placeholder artist trajectory simulation\n  output$artist_trajectory &lt;- renderPlot({\n    timeline &lt;- 2025:2040\n    popularity &lt;- cumsum(runif(length(timeline), min = 0, max = 5))\n    plot(timeline, popularity, type = \"o\", col = \"darkgreen\",\n         xlab = \"Year\", ylab = \"Simulated Popularity\",\n         main = paste(\"Trajectory for\", input$user_input))\n  })\n  \n}"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/MC1/InClassEx03.html",
    "href": "TakeHome_Exercises/TakeHome_Ex02/MC1/InClassEx03.html",
    "title": "In Class Exercise 3",
    "section": "",
    "text": "Code\npacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph)"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/MC1/InClassEx03.html#mapping-from-node-id-to-row-index",
    "href": "TakeHome_Exercises/TakeHome_Ex02/MC1/InClassEx03.html#mapping-from-node-id-to-row-index",
    "title": "In Class Exercise 3",
    "section": "3.6.1 Mapping from node id to row index",
    "text": "3.6.1 Mapping from node id to row index\n\n\nCode\nid_map &lt;- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n\n\nThis ensures each id from your node list is mapped to the correct row number."
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/MC1/InClassEx03.html#map-source-and-target-ids-to-row-indices",
    "href": "TakeHome_Exercises/TakeHome_Ex02/MC1/InClassEx03.html#map-source-and-target-ids-to-row-indices",
    "title": "In Class Exercise 3",
    "section": "3.6.2 Map source and target IDs to row indices",
    "text": "3.6.2 Map source and target IDs to row indices\n\n\nCode\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/MC1/InClassEx03.html#invalid-edges",
    "href": "TakeHome_Exercises/TakeHome_Ex02/MC1/InClassEx03.html#invalid-edges",
    "title": "In Class Exercise 3",
    "section": "3.6.3 Invalid Edges",
    "text": "3.6.3 Invalid Edges\n\n\nCode\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from),!is.na(to))"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/MC1/InClassEx03.html#creating-the-graph",
    "href": "TakeHome_Exercises/TakeHome_Ex02/MC1/InClassEx03.html#creating-the-graph",
    "title": "In Class Exercise 3",
    "section": "3.6.4 Creating the Graph",
    "text": "3.6.4 Creating the Graph\n\n\nCode\ngraph &lt;- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl,\n                   directed = kg$directed)"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/MC1/InClassEx03.html#visualising-the-knowledge-graph",
    "href": "TakeHome_Exercises/TakeHome_Ex02/MC1/InClassEx03.html#visualising-the-knowledge-graph",
    "title": "In Class Exercise 3",
    "section": "3.6.5 Visualising the Knowledge Graph",
    "text": "3.6.5 Visualising the Knowledge Graph\n\n\nCode\nset.seed(1234)\n\n\n\n\nCode\n#| eval: false\nggraph(graph,layout = \"fr\") +\n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) + \n  theme_void()\n\n\nWarning: ggrepel: 17411 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/MC1/InClassEx03.html#filter-edges-to-only-memberof",
    "href": "TakeHome_Exercises/TakeHome_Ex02/MC1/InClassEx03.html#filter-edges-to-only-memberof",
    "title": "In Class Exercise 3",
    "section": "3.7.1 Filter Edges to only “MemberOf”",
    "text": "3.7.1 Filter Edges to only “MemberOf”\n\n\nCode\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/MC1/InClassEx03.html#extract-only-connected-nodes-i.e.-used-in-these-edges",
    "href": "TakeHome_Exercises/TakeHome_Ex02/MC1/InClassEx03.html#extract-only-connected-nodes-i.e.-used-in-these-edges",
    "title": "In Class Exercise 3",
    "section": "3.7.2 Extract only connected nodes (i.e., used in these edges)",
    "text": "3.7.2 Extract only connected nodes (i.e., used in these edges)\n\n\nCode\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/MC1/InClassEx03.html#keep-only-those-nodes",
    "href": "TakeHome_Exercises/TakeHome_Ex02/MC1/InClassEx03.html#keep-only-those-nodes",
    "title": "In Class Exercise 3",
    "section": "3.7.3 Keep only those nodes",
    "text": "3.7.3 Keep only those nodes\n\n\nCode\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id) #optional cleanup"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/MC1/InClassEx03.html#plot-the-subgraph",
    "href": "TakeHome_Exercises/TakeHome_Ex02/MC1/InClassEx03.html#plot-the-subgraph",
    "title": "In Class Exercise 3",
    "section": "3.7.4 Plot the subgraph",
    "text": "3.7.4 Plot the subgraph\n\n\nCode\nggraph(graph_memberof,\n       layout = \"fr\") + \n  geom_edge_link(alpha = 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 1) + \n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n\n\nWarning: ggrepel: 790 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visual Analytics & Applications",
    "section": "",
    "text": "My website showcases my learning journey for this course in the AY2024–25 April term taught by Professor Kam Tin Seong at SMU. The course explores how visualizations can turn raw data into meaningful insights, using tools like Quarto for web-based reporting and Tableau for interactive dashboards. Throughout the semester, I’ll be sharing my coursework, projects, and reflections here — so stay tuned as this site evolves!\n\n\n\n\nI’m currently a full-time business analyst and a part-time MITB student, with a keen interest in data storytelling and analytics. My goal is to pivot into a data science role, to combine analytical techniques with strong business intuition to solve real-world problems. When I’m not coding or studying, you can usually find me at the gym, painting on a quiet weekend, or planning my next travel adventure. Feel free to reach out to me!"
  },
  {
    "objectID": "index.html#about-this-course",
    "href": "index.html#about-this-course",
    "title": "Visual Analytics & Applications",
    "section": "",
    "text": "My website showcases my learning journey for this course in the AY2024–25 April term taught by Professor Kam Tin Seong at SMU. The course explores how visualizations can turn raw data into meaningful insights, using tools like Quarto for web-based reporting and Tableau for interactive dashboards. Throughout the semester, I’ll be sharing my coursework, projects, and reflections here — so stay tuned as this site evolves!"
  },
  {
    "objectID": "index.html#about-myself",
    "href": "index.html#about-myself",
    "title": "Visual Analytics & Applications",
    "section": "",
    "text": "I’m currently a full-time business analyst and a part-time MITB student, with a keen interest in data storytelling and analytics. My goal is to pivot into a data science role, to combine analytical techniques with strong business intuition to solve real-world problems. When I’m not coding or studying, you can usually find me at the gym, painting on a quiet weekend, or planning my next travel adventure. Feel free to reach out to me!"
  },
  {
    "objectID": "InClass_Exercises/InClass_Ex03/MC1/InClassEx03.html",
    "href": "InClass_Exercises/InClass_Ex03/MC1/InClassEx03.html",
    "title": "In Class Exercise 3",
    "section": "",
    "text": "Code\npacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph)"
  },
  {
    "objectID": "InClass_Exercises/InClass_Ex03/MC1/InClassEx03.html#mapping-from-node-id-to-row-index",
    "href": "InClass_Exercises/InClass_Ex03/MC1/InClassEx03.html#mapping-from-node-id-to-row-index",
    "title": "In Class Exercise 3",
    "section": "3.6.1 Mapping from node id to row index",
    "text": "3.6.1 Mapping from node id to row index\n\n\nCode\nid_map &lt;- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n\n\nThis ensures each id from your node list is mapped to the correct row number."
  },
  {
    "objectID": "InClass_Exercises/InClass_Ex03/MC1/InClassEx03.html#map-source-and-target-ids-to-row-indices",
    "href": "InClass_Exercises/InClass_Ex03/MC1/InClassEx03.html#map-source-and-target-ids-to-row-indices",
    "title": "In Class Exercise 3",
    "section": "3.6.2 Map source and target IDs to row indices",
    "text": "3.6.2 Map source and target IDs to row indices\n\n\nCode\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)"
  },
  {
    "objectID": "InClass_Exercises/InClass_Ex03/MC1/InClassEx03.html#invalid-edges",
    "href": "InClass_Exercises/InClass_Ex03/MC1/InClassEx03.html#invalid-edges",
    "title": "In Class Exercise 3",
    "section": "3.6.3 Invalid Edges",
    "text": "3.6.3 Invalid Edges\n\n\nCode\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from),!is.na(to))"
  },
  {
    "objectID": "InClass_Exercises/InClass_Ex03/MC1/InClassEx03.html#creating-the-graph",
    "href": "InClass_Exercises/InClass_Ex03/MC1/InClassEx03.html#creating-the-graph",
    "title": "In Class Exercise 3",
    "section": "3.6.4 Creating the Graph",
    "text": "3.6.4 Creating the Graph\n\n\nCode\ngraph &lt;- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl,\n                   directed = kg$directed)"
  },
  {
    "objectID": "InClass_Exercises/InClass_Ex03/MC1/InClassEx03.html#visualising-the-knowledge-graph",
    "href": "InClass_Exercises/InClass_Ex03/MC1/InClassEx03.html#visualising-the-knowledge-graph",
    "title": "In Class Exercise 3",
    "section": "3.6.5 Visualising the Knowledge Graph",
    "text": "3.6.5 Visualising the Knowledge Graph\n\n\nCode\nset.seed(1234)\n\n\n\n\nCode\n#| eval: false\nggraph(graph,layout = \"fr\") +\n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) + \n  theme_void()\n\n\nWarning: ggrepel: 17411 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "InClass_Exercises/InClass_Ex03/MC1/InClassEx03.html#filter-edges-to-only-memberof",
    "href": "InClass_Exercises/InClass_Ex03/MC1/InClassEx03.html#filter-edges-to-only-memberof",
    "title": "In Class Exercise 3",
    "section": "3.7.1 Filter Edges to only “MemberOf”",
    "text": "3.7.1 Filter Edges to only “MemberOf”\n\n\nCode\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")"
  },
  {
    "objectID": "InClass_Exercises/InClass_Ex03/MC1/InClassEx03.html#extract-only-connected-nodes-i.e.-used-in-these-edges",
    "href": "InClass_Exercises/InClass_Ex03/MC1/InClassEx03.html#extract-only-connected-nodes-i.e.-used-in-these-edges",
    "title": "In Class Exercise 3",
    "section": "3.7.2 Extract only connected nodes (i.e., used in these edges)",
    "text": "3.7.2 Extract only connected nodes (i.e., used in these edges)\n\n\nCode\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique"
  },
  {
    "objectID": "InClass_Exercises/InClass_Ex03/MC1/InClassEx03.html#keep-only-those-nodes",
    "href": "InClass_Exercises/InClass_Ex03/MC1/InClassEx03.html#keep-only-those-nodes",
    "title": "In Class Exercise 3",
    "section": "3.7.3 Keep only those nodes",
    "text": "3.7.3 Keep only those nodes\n\n\nCode\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id) #optional cleanup"
  },
  {
    "objectID": "InClass_Exercises/InClass_Ex03/MC1/InClassEx03.html#plot-the-subgraph",
    "href": "InClass_Exercises/InClass_Ex03/MC1/InClassEx03.html#plot-the-subgraph",
    "title": "In Class Exercise 3",
    "section": "3.7.4 Plot the subgraph",
    "text": "3.7.4 Plot the subgraph\n\n\nCode\nggraph(graph_memberof,\n       layout = \"fr\") + \n  geom_edge_link(alpha = 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 1) + \n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n\n\nWarning: ggrepel: 790 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08C/data/geospatial/MPSZ-2019.html",
    "href": "HandsOn_Exercises/HandsOn_Ex08C/data/geospatial/MPSZ-2019.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\n&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08B/data/geospatial/MPSZ-2019.html",
    "href": "HandsOn_Exercises/HandsOn_Ex08B/data/geospatial/MPSZ-2019.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\n&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08A/data/geospatial/MPSZ-2019.html",
    "href": "HandsOn_Exercises/HandsOn_Ex08A/data/geospatial/MPSZ-2019.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\n&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html",
    "title": "Hands On Exercise 5",
    "section": "",
    "text": "Note: Please toggle between ‘Show’ and ‘Hide’ above based on your preference for viewing the R codes."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#installing-and-launching-r-packages",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#installing-and-launching-r-packages",
    "title": "Hands On Exercise 5",
    "section": "5.2.1 Installing and launching R packages",
    "text": "5.2.1 Installing and launching R packages\nIn this hands-on exercise, four network data modelling and visualisation packages will be installed and launched. They are igraph, tidygraph, ggraph and visNetwork. Beside these four packages, tidyverse and lubridate, an R package specially designed to handle and wrangling time data will be installed and launched too.\n\n\nCode\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#the-edges-data",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#the-edges-data",
    "title": "Hands On Exercise 5",
    "section": "5.3.1 The edges data",
    "text": "5.3.1 The edges data\n\nGAStech-email_edges.csv which consists of two weeks of 9063 emails correspondances between 55 employees."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#the-nodes-data",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#the-nodes-data",
    "title": "Hands On Exercise 5",
    "section": "5.3.2 The nodes data",
    "text": "5.3.2 The nodes data\n\nGAStech_email_nodes.csv which consist of the names, department and title of the 55 employees."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#importing-network-data-from-files",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#importing-network-data-from-files",
    "title": "Hands On Exercise 5",
    "section": "5.3.3 Importing network data from files",
    "text": "5.3.3 Importing network data from files\nIn this step, you will import GAStech_email_node.csv and GAStech_email_edges-v2.csv into RStudio environment by using read_csv() of readr package.\n\n\nCode\nGAStech_nodes &lt;- read_csv(\"GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"GAStech_email_edge-v2.csv\")"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#reviewing-the-imported-data",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#reviewing-the-imported-data",
    "title": "Hands On Exercise 5",
    "section": "5.3.4 Reviewing the imported data",
    "text": "5.3.4 Reviewing the imported data\nNext, we will examine the structure of the data frame using glimpse() of dplyr.\n\n\nCode\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#wrangling-time",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#wrangling-time",
    "title": "Hands On Exercise 5",
    "section": "5.3.5 Wrangling time",
    "text": "5.3.5 Wrangling time\nThe code below will be used to perform the changes.\n\n\nCode\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#reviewing-the-revised-date-fields",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#reviewing-the-revised-date-fields",
    "title": "Hands On Exercise 5",
    "section": "5.3.6 Reviewing the revised date fields",
    "text": "5.3.6 Reviewing the revised date fields\nTable below shows the data structure of the reformatted GAStech_edges data frame."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#wrangling-attributes",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#wrangling-attributes",
    "title": "Hands On Exercise 5",
    "section": "5.3.7 Wrangling attributes",
    "text": "5.3.7 Wrangling attributes\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation. In view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\n\n\nCode\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#reviewing-the-revised-edges-file",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#reviewing-the-revised-edges-file",
    "title": "Hands On Exercise 5",
    "section": "5.3.8 Reviewing the revised edges file",
    "text": "5.3.8 Reviewing the revised edges file\nTable below shows the data structure of the reformatted GAStech_edges data frame"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#the-tbl_graph-object",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#the-tbl_graph-object",
    "title": "Hands On Exercise 5",
    "section": "5.4.1 The tbl_graph object",
    "text": "5.4.1 The tbl_graph object\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network. Below are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor)."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#the-dplyr-verbs-in-tidygraph",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#the-dplyr-verbs-in-tidygraph",
    "title": "Hands On Exercise 5",
    "section": "5.4.2 The dplyr verbs in tidygraph",
    "text": "5.4.2 The dplyr verbs in tidygraph\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\n\n\nIn the above the .N() function is used to gain access to the node data while manipulating the edge data. Similarly .E() will give you the edge data and .G() will give you the tbl_graph object itself."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#using-tbl_graph-to-build-tidygraph-data-model.",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#using-tbl_graph-to-build-tidygraph-data-model.",
    "title": "Hands On Exercise 5",
    "section": "5.4.3 Using tbl_graph() to build tidygraph data model.",
    "text": "5.4.3 Using tbl_graph() to build tidygraph data model.\nIn this section, you will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\nBefore typing the codes, you are recommended to review to reference guide of tbl_graph().\n\n\nCode\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#reviewing-the-output-tidygraphs-graph-object",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#reviewing-the-output-tidygraphs-graph-object",
    "title": "Hands On Exercise 5",
    "section": "5.4.4 Reviewing the output tidygraph’s graph object",
    "text": "5.4.4 Reviewing the output tidygraph’s graph object\n\n\nCode\nGAStech_graph\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#reviewing-the-output-tidygraphs-graph-object-1",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#reviewing-the-output-tidygraphs-graph-object-1",
    "title": "Hands On Exercise 5",
    "section": "5.4.5 Reviewing the output tidygraph’s graph object",
    "text": "5.4.5 Reviewing the output tidygraph’s graph object\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges.\nThe command also prints the first six rows of “Node Data” and the first three of “Edge Data”.\nIt states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#changing-the-active-object",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#changing-the-active-object",
    "title": "Hands On Exercise 5",
    "section": "5.4.6 Changing the active object",
    "text": "5.4.6 Changing the active object\nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\n\n\nCode\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows\n\n\nVisit the reference guide of activate() to find out more about the function."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#plotting-a-basic-network-graph",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#plotting-a-basic-network-graph",
    "title": "Hands On Exercise 5",
    "section": "5.5.1 Plotting a basic network graph",
    "text": "5.5.1 Plotting a basic network graph\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph. Before your get started, it is advisable to read their respective reference guide at least once.\n\n\nCode\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#changing-the-default-network-graph-theme",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#changing-the-default-network-graph-theme",
    "title": "Hands On Exercise 5",
    "section": "5.5.2 Changing the default network graph theme",
    "text": "5.5.2 Changing the default network graph theme\nIn this section, you will use theme_graph() to remove the x and y axes. Before your get started, it is advisable to read it’s reference guide at least once.\n\n\nCode\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#changing-the-color-of-the-plot",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#changing-the-color-of-the-plot",
    "title": "Hands On Exercise 5",
    "section": "5.5.3 Changing the color of the plot",
    "text": "5.5.3 Changing the color of the plot\nFurthermore, theme_graph() makes it easy to change the coloring of the plot.\n\n\nCode\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#working-with-ggraphs-layouts",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#working-with-ggraphs-layouts",
    "title": "Hands On Exercise 5",
    "section": "5.5.4 Working with ggraph’s layouts",
    "text": "5.5.4 Working with ggraph’s layouts\nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph()."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#fruchterman-and-reingold-layout",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#fruchterman-and-reingold-layout",
    "title": "Hands On Exercise 5",
    "section": "5.5.5 Fruchterman and Reingold layout",
    "text": "5.5.5 Fruchterman and Reingold layout\nThe code chunks below will be used to plot the network graph using Fruchterman and Reingold layout. layout argument is used to define the layout to be used.\n\n\nCode\ng &lt;- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#modifying-network-nodes",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#modifying-network-nodes",
    "title": "Hands On Exercise 5",
    "section": "5.5.6 Modifying network nodes",
    "text": "5.5.6 Modifying network nodes\nIn this section, you will colour each node by referring to their respective departments. geom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes.\n\n\nCode\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#modifying-edges",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#modifying-edges",
    "title": "Hands On Exercise 5",
    "section": "5.5.7 Modifying edges",
    "text": "5.5.7 Modifying edges\nIn the code chunk below, the thickness of the edges will be mapped with the Weight variable. geom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. The argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line.\n\n\nCode\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#working-with-facet_edges",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#working-with-facet_edges",
    "title": "Hands On Exercise 5",
    "section": "5.6.1 Working with facet_edges()",
    "text": "5.6.1 Working with facet_edges()\nIn the code chunk below, facet_edges() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\n\nCode\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#working-with-facet_edges-1",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#working-with-facet_edges-1",
    "title": "Hands On Exercise 5",
    "section": "5.6.2 Working with facet_edges()",
    "text": "5.6.2 Working with facet_edges()\nThe code below uses theme() to change the position of the legend.\n\n\nCode\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#a-framed-facet-graph",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#a-framed-facet-graph",
    "title": "Hands On Exercise 5",
    "section": "5.6.3 A framed facet graph",
    "text": "5.6.3 A framed facet graph\nThe code chunk below adds frame to each graph.\n\n\nCode\nset_graph_style() \n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#working-with-facet_nodes",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#working-with-facet_nodes",
    "title": "Hands On Exercise 5",
    "section": "5.6.4 Working with facet_nodes()",
    "text": "5.6.4 Working with facet_nodes()\nIn the code chunkc below, facet_nodes() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\n\nCode\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#computing-centrality-indices",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#computing-centrality-indices",
    "title": "Hands On Exercise 5",
    "section": "5.7.1 Computing centrality indices",
    "text": "5.7.1 Computing centrality indices\nCentrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector. It is beyond the scope of this hands-on exercise to cover the principles and mathematics of these measure here. Students are encouraged to refer to Chapter 7: Actor Prominence of A User’s Guide to Network Analysis in R to gain better understanding of theses network measures. mutate() of dplyr is used to perform the computation. The algorithm used, on the other hand, is the centrality_betweenness() of tidygraph.\n\n\nCode\ng &lt;- GAStech_graph %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#visualising-network-metrics",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#visualising-network-metrics",
    "title": "Hands On Exercise 5",
    "section": "5.7.2 Visualising network metrics",
    "text": "5.7.2 Visualising network metrics\nIt is important to note that from ggraph v2.0 onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.\n\n\nCode\ng &lt;- GAStech_graph %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#visualising-community",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#visualising-community",
    "title": "Hands On Exercise 5",
    "section": "5.7.3 Visualising Community",
    "text": "5.7.3 Visualising Community\ntidygraph package inherits many of the community detection algorithms embedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it. Use this link to learn more about the community detection functions provided by tidygraph. group_edge_betweenness() is used. To support effective visual investigation, the community network above has been revised by using geom_mark_hull() of ggforce package. Please be reminded that you must to install and include ggforce and concaveman packages before running the code below.\n\n\nCode\ng &lt;- GAStech_graph %&gt;%\n  mutate(community = as.factor(\n    group_edge_betweenness(\n      weights = Weight, \n      directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(\n    aes(\n      width=Weight), \n    alpha=0.2) +\n  scale_edge_width(\n    range = c(0.1, 5)) +\n  geom_node_point(\n    aes(colour = community))  \n\ng + theme_graph()"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#data-preparation",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#data-preparation",
    "title": "Hands On Exercise 5",
    "section": "5.8.1 Data preparation",
    "text": "5.8.1 Data preparation\nBefore we can plot the interactive network graph, we need to prepare the data model by using the code below.\n\n\nCode\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#plotting-the-first-interactive-network-graph",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#plotting-the-first-interactive-network-graph",
    "title": "Hands On Exercise 5",
    "section": "5.8.2 Plotting the first interactive network graph",
    "text": "5.8.2 Plotting the first interactive network graph\nThe code chunk below will be used to plot an interactive network graph by using the data prepared.\n\n\nCode\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#working-with-layout",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#working-with-layout",
    "title": "Hands On Exercise 5",
    "section": "5.8.3 Working with layout",
    "text": "5.8.3 Working with layout\nIn the code chunk below, Fruchterman and Reingold layout is used. Visit Igraph to find out more about visIgraphLayout’s argument.\n\n\nCode\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\")"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#working-with-visual-attributes---nodes",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#working-with-visual-attributes---nodes",
    "title": "Hands On Exercise 5",
    "section": "5.8.4 Working with visual attributes - Nodes",
    "text": "5.8.4 Working with visual attributes - Nodes\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field. The code chunk below rename Department field to group.\n\n\nCode\nGAStech_nodes &lt;- GAStech_nodes %&gt;%\n  rename(group = Department) \n\n\nWhen we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\n\nCode\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#working-with-visual-attributes---edges",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#working-with-visual-attributes---edges",
    "title": "Hands On Exercise 5",
    "section": "5.8.5 Working with visual attributes - Edges",
    "text": "5.8.5 Working with visual attributes - Edges\nIn the code run below visEdges() is used to symbolise the edges.\n- The argument arrows is used to define where to place the arrow.\n- The smooth argument is used to plot the edges using a smooth curve.\n\n\nCode\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#interactivity",
    "href": "HandsOn_Exercises/HandsOn_Ex05/HandsOnEx05.html#interactivity",
    "title": "Hands On Exercise 5",
    "section": "5.8.6 Interactivity",
    "text": "5.8.6 Interactivity\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation.\n\nThe argument highlightNearest highlights nearest when clicking a node.\nThe argument nodesIdSelection adds an id node selection creating an HTML select element.\n\n\n\nCode\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\nAdditional\n\n\nCode\ncolnames(GAStech_nodes)\n\n\n[1] \"id\"    \"label\" \"group\" \"Title\""
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04C/HandsOnEx04C.html",
    "href": "HandsOn_Exercises/HandsOn_Ex04C/HandsOnEx04C.html",
    "title": "Hands On Exercise 4C",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter you will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04C/HandsOnEx04C.html#installing-and-loading-the-packages",
    "href": "HandsOn_Exercises/HandsOn_Ex04C/HandsOnEx04C.html#installing-and-loading-the-packages",
    "title": "Hands On Exercise 4C",
    "section": "11.2.1 Installing and loading the packages",
    "text": "11.2.1 Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\n\nCode\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04C/HandsOnEx04C.html#data-import",
    "href": "HandsOn_Exercises/HandsOn_Ex04C/HandsOnEx04C.html#data-import",
    "title": "Hands On Exercise 4C",
    "section": "11.2.2 Data import",
    "text": "11.2.2 Data import\nFor the purpose of this exercise, Exam_data.csv will be used.\n\n\nCode\nexam &lt;- read_csv(\"Exam_data.csv\")"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04C/HandsOnEx04C.html#plotting-standard-error-bars-of-point-estimates",
    "href": "HandsOn_Exercises/HandsOn_Ex04C/HandsOnEx04C.html#plotting-standard-error-bars-of-point-estimates",
    "title": "Hands On Exercise 4C",
    "section": "11.3.1 Plotting standard error bars of point estimates",
    "text": "11.3.1 Plotting standard error bars of point estimates\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\n\nCode\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04C/HandsOnEx04C.html#plotting-confidence-interval-of-point-estimates",
    "href": "HandsOn_Exercises/HandsOn_Ex04C/HandsOnEx04C.html#plotting-confidence-interval-of-point-estimates",
    "title": "Hands On Exercise 4C",
    "section": "11.3.2 Plotting confidence interval of point estimates",
    "text": "11.3.2 Plotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\n\nCode\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04C/HandsOnEx04C.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "href": "HandsOn_Exercises/HandsOn_Ex04C/HandsOnEx04C.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "title": "Hands On Exercise 4C",
    "section": "11.3.3 Visualizing the uncertainty of point estimates with interactive error bars",
    "text": "11.3.3 Visualizing the uncertainty of point estimates with interactive error bars\nIn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\n\nCode\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04C/HandsOnEx04C.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "HandsOn_Exercises/HandsOn_Ex04C/HandsOnEx04C.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "Hands On Exercise 4C",
    "section": "11.4.1 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "11.4.1 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\n\nCode\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04C/HandsOnEx04C.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "href": "HandsOn_Exercises/HandsOn_Ex04C/HandsOnEx04C.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "title": "Hands On Exercise 4C",
    "section": "11.4.2 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "11.4.2 Visualizing the uncertainty of point estimates: ggdist methods\n\n\nCode\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04C/HandsOnEx04C.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-2",
    "href": "HandsOn_Exercises/HandsOn_Ex04C/HandsOnEx04C.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-2",
    "title": "Hands On Exercise 4C",
    "section": "11.4.3 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "11.4.3 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\n\nCode\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04C/HandsOnEx04C.html#installing-ungeviz-package",
    "href": "HandsOn_Exercises/HandsOn_Ex04C/HandsOnEx04C.html#installing-ungeviz-package",
    "title": "Hands On Exercise 4C",
    "section": "11.5.1 Installing ungeviz package",
    "text": "11.5.1 Installing ungeviz package\nNote: You only need to perform this step once.\n\n\nCode\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\nstrapgod (NA    -&gt; ea2b1ecfc...) [GitHub]\ncli      (3.6.4 -&gt; 3.6.5       ) [CRAN]\nutf8     (1.2.4 -&gt; 1.2.5       ) [CRAN]\nmvtnorm  (NA    -&gt; 1.3-3       ) [CRAN]\n\n\ncli  (3.6.4 -&gt; 3.6.5) [CRAN]\nutf8 (1.2.4 -&gt; 1.2.5) [CRAN]\n\n\npackage 'cli' successfully unpacked and MD5 sums checked\n\n\npackage 'utf8' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\sandr\\AppData\\Local\\Temp\\RtmpYn1NyU\\downloaded_packages\n── R CMD build ─────────────────────────────────────────────────────────────────\n\n\n* checking for file 'C:\\Users\\sandr\\AppData\\Local\\Temp\\RtmpYn1NyU\\remotes2cf44dad52f\\DavisVaughan-strapgod-ea2b1ec/DESCRIPTION' ... OK\n* preparing 'strapgod':\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\nOmitted 'LazyData' from DESCRIPTION\n* building 'strapgod_0.0.4.9000.tar.gz'\n\n\n\npackage 'cli' successfully unpacked and MD5 sums checked\n\n\npackage 'utf8' successfully unpacked and MD5 sums checked\npackage 'mvtnorm' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\sandr\\AppData\\Local\\Temp\\RtmpYn1NyU\\downloaded_packages\n\n\n── R CMD build ─────────────────────────────────────────────────────────────────\n\n\n* checking for file 'C:\\Users\\sandr\\AppData\\Local\\Temp\\RtmpYn1NyU\\remotes2cf43b1e4620\\wilkelab-ungeviz-74e1651/DESCRIPTION' ... OK\n* preparing 'ungeviz':\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\n* building 'ungeviz_0.1.0.tar.gz'"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04C/HandsOnEx04C.html#launch-the-application-in-r",
    "href": "HandsOn_Exercises/HandsOn_Ex04C/HandsOnEx04C.html#launch-the-application-in-r",
    "title": "Hands On Exercise 4C",
    "section": "11.5.2 Launch the application in R",
    "text": "11.5.2 Launch the application in R\n\n\nCode\nlibrary(ungeviz)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04C/HandsOnEx04C.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "href": "HandsOn_Exercises/HandsOn_Ex04C/HandsOnEx04C.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "title": "Hands On Exercise 4C",
    "section": "11.5.3 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "11.5.3 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\nNext, the code chunk below will be used to build the HOPs.\n\n\nCode\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04A/HandsOnEx04A.html",
    "href": "HandsOn_Exercises/HandsOn_Ex04A/HandsOnEx04A.html",
    "title": "Hands On Exercise 4A",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04A/HandsOnEx04A.html#installing-and-loading-the-packages",
    "href": "HandsOn_Exercises/HandsOn_Ex04A/HandsOnEx04A.html#installing-and-loading-the-packages",
    "title": "Hands On Exercise 4A",
    "section": "9.2.1 Installing and loading the packages",
    "text": "9.2.1 Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots\nggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty\ntidyverse, a family of R packages to meet the modern data science and visual communication needs\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package\ncolorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used load these R packages into RStudio environment.\n\n\nCode\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04A/HandsOnEx04A.html#data-import",
    "href": "HandsOn_Exercises/HandsOn_Ex04A/HandsOnEx04A.html#data-import",
    "title": "Hands On Exercise 4A",
    "section": "9.2.2 Data Import",
    "text": "9.2.2 Data Import\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\n\nCode\nexam &lt;- read_csv(\"Exam_data.csv\")"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html",
    "href": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html",
    "title": "Hands On Exercise 3A",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands On Exercise 3A",
    "section": "3.4.1 Tooltip effect with tooltip aesthetic",
    "text": "3.4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\n\nCode\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#displaying-multiple-information-on-tooltip",
    "href": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#displaying-multiple-information-on-tooltip",
    "title": "Hands On Exercise 3A",
    "section": "3.5.1 Displaying multiple information on tooltip",
    "text": "3.5.1 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\n\nCode\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#customising-tooltip-style",
    "href": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#customising-tooltip-style",
    "title": "Hands On Exercise 3A",
    "section": "3.6.1 Customising Tooltip style",
    "text": "3.6.1 Customising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\n\nCode\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)   \n\n\n\n\n\n\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#displaying-statistics-on-tooltip",
    "href": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#displaying-statistics-on-tooltip",
    "title": "Hands On Exercise 3A",
    "section": "3.6.2 Displaying statistics on tooltip",
    "text": "3.6.2 Displaying statistics on tooltip\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\n\nCode\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#hover-effect-with-data_id-aesthetic",
    "href": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#hover-effect-with-data_id-aesthetic",
    "title": "Hands On Exercise 3A",
    "section": "3.6.3 Hover effect with data_id aesthetic",
    "text": "3.6.3 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\n\nCode\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n3.6.4 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\n\nCode\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)   \n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n3.6.5 Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\n\nCode\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n) \n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#click-effect-with-onclick",
    "href": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#click-effect-with-onclick",
    "title": "Hands On Exercise 3A",
    "section": "3.6.6 Click effect with onclick",
    "text": "3.6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\n\nCode\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)    \n\n\n\n\n\n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\nNote that click actions must be a string column in the dataset containing valid javascript instructions."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#coordinated-multiple-views-with-ggiraph",
    "href": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands On Exercise 3A",
    "section": "3.6.7 Coordinated Multiple Views with ggiraph",
    "text": "3.6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\nAppropriate interactive functions of ggiraph will be used to create the multiple views. patchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\nCode\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "Hands On Exercise 3A",
    "section": "3.7.1 Creating an interactive scatter plot: plot_ly() method",
    "text": "3.7.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\n\nCode\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#working-with-visual-variable-plot_ly-method",
    "href": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#working-with-visual-variable-plot_ly-method",
    "title": "Hands On Exercise 3A",
    "section": "3.7.2 Working with visual variable: plot_ly() method",
    "text": "3.7.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\n\nCode\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "href": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "title": "Hands On Exercise 3A",
    "section": "3.7.3 Creating an interactive scatter plot: ggplotly() method",
    "text": "3.7.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\n\nCode\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#coordinated-multiple-views-with-plotly",
    "href": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#coordinated-multiple-views-with-plotly",
    "title": "Hands On Exercise 3A",
    "section": "3.7.4 Coordinated Multiple Views with plotly",
    "text": "3.7.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\nhighlight_key() of plotly package is used as shared data. two scatterplots will be created by using ggplot2 functions. lastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nCode\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\nThing to learn from the code chunk:\nhighlight_key() simply creates an object of class crosstalk::SharedData. Visit this link to learn more about crosstalk."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#interactive-data-table-dt-package-a-wrapper-of-the-javascript-library-datatables",
    "href": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#interactive-data-table-dt-package-a-wrapper-of-the-javascript-library-datatables",
    "title": "Hands On Exercise 3A",
    "section": "3.8.1 Interactive Data Table: DT package A wrapper of the JavaScript Library DataTables",
    "text": "3.8.1 Interactive Data Table: DT package A wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nCode\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#linked-brushing-crosstalk-method",
    "href": "HandsOn_Exercises/HandsOn_Ex03A/HandsOnEx03A.html#linked-brushing-crosstalk-method",
    "title": "Hands On Exercise 3A",
    "section": "3.8.2 Linked brushing: crosstalk method",
    "text": "3.8.2 Linked brushing: crosstalk method\nCode chunk below is used to implement the coordinated brushing shown above.\n\n\nCode\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk:\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex01/HandsOnEx01.html",
    "href": "HandsOn_Exercises/HandsOn_Ex01/HandsOnEx01.html",
    "title": "Hands On Exercise 1",
    "section": "",
    "text": "The code below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\n\nCode\npacman::p_load(tidyverse)\n\n\n\n\n\n\n\nCode\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\nshow_col_types = FALSE\n\nknitr::kable(head(exam_data))\n\n\n\n\n\nID\nCLASS\nGENDER\nRACE\nENGLISH\nMATHS\nSCIENCE\n\n\n\n\nStudent321\n3I\nMale\nMalay\n21\n9\n15\n\n\nStudent305\n3I\nFemale\nMalay\n24\n22\n16\n\n\nStudent289\n3H\nMale\nChinese\n26\n16\n16\n\n\nStudent227\n3F\nMale\nChinese\n27\n77\n31\n\n\nStudent318\n3I\nMale\nMalay\n27\n11\n25\n\n\nStudent306\n3I\nFemale\nMalay\n31\n16\n16"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex01/HandsOnEx01.html#installing-r-packages",
    "href": "HandsOn_Exercises/HandsOn_Ex01/HandsOnEx01.html#installing-r-packages",
    "title": "Hands On Exercise 1",
    "section": "",
    "text": "The code below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\n\nCode\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex01/HandsOnEx01.html#importing-data",
    "href": "HandsOn_Exercises/HandsOn_Ex01/HandsOnEx01.html#importing-data",
    "title": "Hands On Exercise 1",
    "section": "",
    "text": "Code\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\nshow_col_types = FALSE\n\nknitr::kable(head(exam_data))\n\n\n\n\n\nID\nCLASS\nGENDER\nRACE\nENGLISH\nMATHS\nSCIENCE\n\n\n\n\nStudent321\n3I\nMale\nMalay\n21\n9\n15\n\n\nStudent305\n3I\nFemale\nMalay\n24\n22\n16\n\n\nStudent289\n3H\nMale\nChinese\n26\n16\n16\n\n\nStudent227\n3F\nMale\nChinese\n27\n77\n31\n\n\nStudent318\n3I\nMale\nMalay\n27\n11\n25\n\n\nStudent306\n3I\nFemale\nMalay\n31\n16\n16"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex01/HandsOnEx01.html#data",
    "href": "HandsOn_Exercises/HandsOn_Ex01/HandsOnEx01.html#data",
    "title": "Hands On Exercise 1",
    "section": "Data",
    "text": "Data\nFirst, let’s call the ggplot() function using the below code.\n\n\nCode\nggplot(data=exam_data)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex01/HandsOnEx01.html#aesthetic-mappings",
    "href": "HandsOn_Exercises/HandsOn_Ex01/HandsOnEx01.html#aesthetic-mappings",
    "title": "Hands On Exercise 1",
    "section": "Aesthetic mappings",
    "text": "Aesthetic mappings\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS))"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex01/HandsOnEx01.html#geom",
    "href": "HandsOn_Exercises/HandsOn_Ex01/HandsOnEx01.html#geom",
    "title": "Hands On Exercise 1",
    "section": "Geom",
    "text": "Geom\nGeometric objects are the actual marks we put on a plot. A plot must have at least one geom and there is no upper limit. You can add a geom to a plot using the + operator.\nExamples include:\n\ngeom_point() for drawing individual points (e.g., a scatter plot)\ngeom_line() for drawing lines (e.g., for a line charts)\ngeom_bar() for drawing bars (e.g., for bar charts)\ngeom_jitter() to add a small amount of random variation to the location of each point\ngeom_map() for drawing polygons in the shape of a map!"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex02/HandsOnEx02.html",
    "href": "HandsOn_Exercises/HandsOn_Ex02/HandsOnEx02.html",
    "title": "Hands On Exercise 2",
    "section": "",
    "text": "There are several ggplot2 extensions for creating more elegant and effective statistical graphics. Let’s explore these features!\n\nGetting Started\nBesides tidyverse, four R packages will be used.\n\nggrepel: to provide geoms for ggplot2 to repel overlapping text labels\nggthemes: to provide extra themes, geoms, and scales for ‘ggplot2’\nhrbrthemes: for typography-centric themes and theme components for ggplot2\npatchwork: for preparing composite figure created using ggplot2\n\nTo check if these packages have been installed and to load them into your working R environment, run the code below.\n\n\nCode\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse)\n\n\n\n\nImporting Data\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. \n\n\nCode\nexam_data &lt;- read_csv(\"Exam_data.csv\")\nshow_col_types = FALSE\nknitr::kable(head(exam_data))\n\n\n\n\n\nID\nCLASS\nGENDER\nRACE\nENGLISH\nMATHS\nSCIENCE\n\n\n\n\nStudent321\n3I\nMale\nMalay\n21\n9\n15\n\n\nStudent305\n3I\nFemale\nMalay\n24\n22\n16\n\n\nStudent289\n3H\nMale\nChinese\n26\n16\n16\n\n\nStudent227\n3F\nMale\nChinese\n27\n77\n31\n\n\nStudent318\n3I\nMale\nMalay\n27\n11\n25\n\n\nStudent306\n3I\nFemale\nMalay\n31\n16\n16\n\n\n\n\n\n\n\nWhat is ggrepel?\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points. Take a look below and see it for yourself.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\nCode\nknitr::opts_chunk$set(warning = FALSE)\n\n\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\nCode\nknitr::opts_chunk$set(warning = FALSE)\n\n\n\n\nThemes\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"#630e27\") +\n  theme_dark() +\n  ggtitle(\"Distribution of Maths Scores\") \n\n\n\n\n\n\n\n\n\nCode\nknitr::opts_chunk$set(warning = FALSE)\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"#630e27\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\nCode\nknitr::opts_chunk$set(warning = FALSE)\n\n\n\n\nCombining Graphs\nLet’s create three graphs named p1, p2 and p3.\n\n\nCode\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"#630e27\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\nknitr::opts_chunk$set(warning = FALSE)\n\n\n\n\nCode\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"black\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\nknitr::opts_chunk$set(warning = FALSE)\n\n\n\n\nCode\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\nknitr::opts_chunk$set(warning = FALSE)\n\n\nPatchwork is a ggplot2 extension designed to combine separate ggplot2 graphs into a single figure. Here’s the syntax.\n\n“/” operator to stack two ggplot2 graphs\n“|” operator to place the plots beside each other\n“()” operator the define the sequence of the plotting\n\n\n\nCode\np1 + p2\n\n\n\n\n\n\n\n\n\n\n\nCode\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n\n\n\nCode\npatchwork &lt;- (p1 / p2) | p3\npatchwork\n\n\n\n\n\n\n\n\n\n\n\nCode\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(stringr::str_wrap(\"English scores versus Maths scores for Primary 3\", width = 30)) +\n  theme_wsj() +\n  theme(plot.title = element_text(hjust = 0.5, size = 15, face = \"bold\"))"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03B/HandsOnEx03B.html",
    "href": "HandsOn_Exercises/HandsOn_Ex03B/HandsOnEx03B.html",
    "title": "Hands On Exercise 3B",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03B/HandsOnEx03B.html#basic-concepts-of-animation",
    "href": "HandsOn_Exercises/HandsOn_Ex03B/HandsOnEx03B.html#basic-concepts-of-animation",
    "title": "Hands On Exercise 3B",
    "section": "",
    "text": "When creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03B/HandsOnEx03B.html#terminology",
    "href": "HandsOn_Exercises/HandsOn_Ex03B/HandsOnEx03B.html#terminology",
    "title": "Hands On Exercise 3B",
    "section": "",
    "text": "Before we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03B/HandsOnEx03B.html#loading-the-r-packages",
    "href": "HandsOn_Exercises/HandsOn_Ex03B/HandsOnEx03B.html#loading-the-r-packages",
    "title": "Hands On Exercise 3B",
    "section": "4.2.1 Loading the R packages",
    "text": "4.2.1 Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\n\nCode\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03B/HandsOnEx03B.html#importing-the-data",
    "href": "HandsOn_Exercises/HandsOn_Ex03B/HandsOnEx03B.html#importing-the-data",
    "title": "Hands On Exercise 3B",
    "section": "4.2.2 Importing the data",
    "text": "4.2.2 Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\n\nCode\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\n\nCode\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03B/HandsOnEx03B.html#building-a-static-population-bubble-plot",
    "href": "HandsOn_Exercises/HandsOn_Ex03B/HandsOnEx03B.html#building-a-static-population-bubble-plot",
    "title": "Hands On Exercise 3B",
    "section": "4.3.1 Building a static population bubble plot",
    "text": "4.3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\n\nCode\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03B/HandsOnEx03B.html#building-the-animated-bubble-plot",
    "href": "HandsOn_Exercises/HandsOn_Ex03B/HandsOnEx03B.html#building-the-animated-bubble-plot",
    "title": "Hands On Exercise 3B",
    "section": "4.3.2 Building the animated bubble plot",
    "text": "4.3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\n\nCode\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03B/HandsOnEx03B.html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "HandsOn_Exercises/HandsOn_Ex03B/HandsOnEx03B.html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "Hands On Exercise 3B",
    "section": "4.4.1 Building an animated bubble plot: ggplotly() method",
    "text": "4.4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\n\nCode\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\n\nCode\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03B/HandsOnEx03B.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "HandsOn_Exercises/HandsOn_Ex03B/HandsOnEx03B.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "Hands On Exercise 3B",
    "section": "4.4.2 Building an animated bubble plot: plot_ly() method",
    "text": "4.4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\n\nCode\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04B/HandsOnEx04B.html",
    "href": "HandsOn_Exercises/HandsOn_Ex04B/HandsOnEx04B.html",
    "title": "Hands On Exercise 4B",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04B/HandsOnEx04B.html#installing-and-launching-r-packages",
    "href": "HandsOn_Exercises/HandsOn_Ex04B/HandsOnEx04B.html#installing-and-launching-r-packages",
    "title": "Hands On Exercise 4B",
    "section": "10.3.1 Installing and launching R packages",
    "text": "10.3.1 Installing and launching R packages\nIn this exercise, ggstatsplot and tidyverse will be used.\n\n\nCode\npacman::p_load(ggstatsplot, tidyverse)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04B/HandsOnEx04B.html#importing-data",
    "href": "HandsOn_Exercises/HandsOn_Ex04B/HandsOnEx04B.html#importing-data",
    "title": "Hands On Exercise 4B",
    "section": "10.3.2 Importing data",
    "text": "10.3.2 Importing data\n\n\nCode\nexam &lt;- read_csv(\"Exam_data.csv\")"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04D/HandsOnEx04D.html",
    "href": "HandsOn_Exercises/HandsOn_Ex04D/HandsOnEx04D.html",
    "title": "Hands On Exercise 4D",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04D/HandsOnEx04D.html#funnelplotr-methods-the-basic-plot",
    "href": "HandsOn_Exercises/HandsOn_Ex04D/HandsOnEx04D.html#funnelplotr-methods-the-basic-plot",
    "title": "Hands On Exercise 4D",
    "section": "8.4.1 FunnelPlotR methods: The basic plot",
    "text": "8.4.1 FunnelPlotR methods: The basic plot\nThe code chunk below plots a funnel plot.\nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\n\n\n\nCode\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04D/HandsOnEx04D.html#funnelplotr-methods-makeover-1",
    "href": "HandsOn_Exercises/HandsOn_Ex04D/HandsOnEx04D.html#funnelplotr-methods-makeover-1",
    "title": "Hands On Exercise 4D",
    "section": "8.4.2 FunnelPlotR methods: Makeover 1",
    "text": "8.4.2 FunnelPlotR methods: Makeover 1\nThe code chunk below plots a funnel plot.\nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis.\n\n\nCode\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04D/HandsOnEx04D.html#funnelplotr-methods-makeover-2",
    "href": "HandsOn_Exercises/HandsOn_Ex04D/HandsOnEx04D.html#funnelplotr-methods-makeover-2",
    "title": "Hands On Exercise 4D",
    "section": "8.4.3 FunnelPlotR methods: Makeover 2",
    "text": "8.4.3 FunnelPlotR methods: Makeover 2\nThe code chunk below plots a funnel plot.\nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles.\n\n\n\nCode\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04D/HandsOnEx04D.html#computing-the-basic-derived-fields",
    "href": "HandsOn_Exercises/HandsOn_Ex04D/HandsOnEx04D.html#computing-the-basic-derived-fields",
    "title": "Hands On Exercise 4D",
    "section": "8.5.1 Computing the basic derived fields",
    "text": "8.5.1 Computing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\n\nCode\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\n\nNext, the fit.mean is computed by using the code chunk below.\n\n\nCode\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04D/HandsOnEx04D.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "href": "HandsOn_Exercises/HandsOn_Ex04D/HandsOnEx04D.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "title": "Hands On Exercise 4D",
    "section": "8.5.2 Calculate lower and upper limits for 95% and 99.9% CI",
    "text": "8.5.2 Calculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\n\nCode\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04D/HandsOnEx04D.html#plotting-a-static-funnel-plot",
    "href": "HandsOn_Exercises/HandsOn_Ex04D/HandsOnEx04D.html#plotting-a-static-funnel-plot",
    "title": "Hands On Exercise 4D",
    "section": "8.5.3 Plotting a static funnel plot",
    "text": "8.5.3 Plotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\n\nCode\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04D/HandsOnEx04D.html#interactive-funnel-plot-plotly-ggplot2",
    "href": "HandsOn_Exercises/HandsOn_Ex04D/HandsOnEx04D.html#interactive-funnel-plot-plotly-ggplot2",
    "title": "Hands On Exercise 4D",
    "section": "8.5.4 Interactive Funnel Plot: plotly + ggplot2",
    "text": "8.5.4 Interactive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\n\nCode\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html",
    "href": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html",
    "title": "Hands On Exercise 6",
    "section": "",
    "text": "Note: Please toggle between ‘Show’ and ‘Hide’ above based on your preference for viewing the R codes."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#importing-data",
    "href": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#importing-data",
    "title": "Hands On Exercise 6",
    "section": "6.3.1 Importing Data",
    "text": "6.3.1 Importing Data\nFirst, you will use the code chunk below to import eventlog.csv file into R environment and called the data frame as attacks. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\nCode\nattacks &lt;- read_csv(\"data/eventlog.csv\")"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#examining-the-data-structure",
    "href": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#examining-the-data-structure",
    "title": "Hands On Exercise 6",
    "section": "6.3.2 Examining the Data Structure",
    "text": "6.3.2 Examining the Data Structure\nIt is always a good practice to examine the imported data frame before further analysis is performed. For example, kable() can be used to review the structure of the imported data frame.\n\n\nCode\nkable(head(attacks))\n\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\ntz field stores time zone of the source IP address."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#data-preparation",
    "href": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#data-preparation",
    "title": "Hands On Exercise 6",
    "section": "6.3.3 Data Preparation",
    "text": "6.3.3 Data Preparation\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task. ymd_hms() and hour() are from lubridate package, and weekdays() is a base R function.\n\n\nCode\nmake_hr_wkday &lt;- function(ts, sc, tz) \n{\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n}\n\n\nStep 2: Deriving the attacks tibble data frame\nBeside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting.\n\n\nCode\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n\nThe table below shows the tidy tibble table after processing.\n\n\nCode\nkable(head(attacks))\n\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#building-a-calendar-heatmap",
    "href": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#building-a-calendar-heatmap",
    "title": "Hands On Exercise 6",
    "section": "6.3.4 Building a Calendar Heatmap",
    "text": "6.3.4 Building a Calendar Heatmap\nA tibble data table called grouped is derived by aggregating the attack by wkday and hour fields. A new field called n is derived by using group_by() and count() functions. na.omit() is used to exclude missing value. geom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles. theme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\n\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\nCode\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#plotting-multiple-calendar-heatmaps",
    "href": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#plotting-multiple-calendar-heatmaps",
    "title": "Hands On Exercise 6",
    "section": "6.3.5 Plotting Multiple Calendar Heatmaps",
    "text": "6.3.5 Plotting Multiple Calendar Heatmaps\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the following:\n\ncount the number of attacks by country,\ncalculate the percent of attacks by country, and\nsave the results in a tibble data frame.\n\n\n\nCode\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\n\nCode\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#plotting-multiple-calendar-heatmaps-1",
    "href": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#plotting-multiple-calendar-heatmaps-1",
    "title": "Hands On Exercise 6",
    "section": "6.3.6 Plotting Multiple Calendar Heatmaps",
    "text": "6.3.6 Plotting Multiple Calendar Heatmaps\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\n\nCode\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#importing-data-1",
    "href": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#importing-data-1",
    "title": "Hands On Exercise 6",
    "section": "6.4.1 Importing Data",
    "text": "6.4.1 Importing Data\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used. The code below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\n\nCode\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#deriving-month-and-year-fields",
    "href": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#deriving-month-and-year-fields",
    "title": "Hands On Exercise 6",
    "section": "6.4.2 Deriving month and year fields",
    "text": "6.4.2 Deriving month and year fields\nNext, two new fields called month and year are derived from Month-Year field.\n\n\nCode\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#extracting-the-target-country",
    "href": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#extracting-the-target-country",
    "title": "Hands On Exercise 6",
    "section": "6.4.3 Extracting the target country",
    "text": "6.4.3 Extracting the target country\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\n\nCode\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#computing-year-average-arrivals-by-month",
    "href": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#computing-year-average-arrivals-by-month",
    "title": "Hands On Exercise 6",
    "section": "6.4.4 Computing year average arrivals by month",
    "text": "6.4.4 Computing year average arrivals by month\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\n\nCode\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#plotting-a-cycle-plot-1",
    "href": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#plotting-a-cycle-plot-1",
    "title": "Hands On Exercise 6",
    "section": "6.4.5 Plotting a Cycle Plot",
    "text": "6.4.5 Plotting a Cycle Plot\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\n\nCode\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#slopegraph",
    "href": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#slopegraph",
    "title": "Hands On Exercise 6",
    "section": "6.6.1 Slopegraph",
    "text": "6.6.1 Slopegraph\n\n\nCode\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                XTextSize = 18,    # Size of the times\n                YTextSize = 2,     # Size of the groups\n                TitleTextSize = 14,\n                SubTitleTextSize = 12,\n                CaptionTextSize = 10,\n                Caption = \"RICE\",\n                TitleJustify = \"right\",\n                SubTitleJustify = \"right\",\n                CaptionJustify = \"left\",\n                DataTextSize = 2.5,\n                DataLabelPadding = 0.2,\n                DataLabelLineSize = 0.5,\n                DataLabelFillColor = \"lightblue\",\n                ThemeChoice = \"wsj\")"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#cycle-plot",
    "href": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#cycle-plot",
    "title": "Hands On Exercise 6",
    "section": "6.6.2 Cycle Plot",
    "text": "6.6.2 Cycle Plot\n\n\nCode\nggplot(Vietnam, aes(x = year, y = `Vietnam`, group = month)) + \n  geom_line(color = \"black\") +\n  geom_hline(data = hline.data, aes(yintercept = avgvalue),\n             linetype = \"dashed\", color = \"red\", size = 0.5) +\n  facet_wrap(~month, nrow = 2) +\n  labs(\n    title = \"Visitor Arrivals from Vietnam by Air (2010–2019)\",\n    subtitle = \"Each line represents yearly visitor counts for a specific month. Red dashed line shows 10-year monthly average.\",\n    y = \"No. of Visitors\",\n    x = NULL\n  ) +\n  theme_tufte(base_family = \"Helvetica\") +\n  theme(\n    strip.text = element_text(size = 10, face = \"bold\"),\n    axis.text.x = element_blank(),\n    axis.ticks.x = element_blank(),\n    plot.title = element_text(face = \"bold\", size = 14, hjust = 0.5),\n    plot.subtitle = element_text(size = 10, hjust = 0.5, color = \"gray30\")\n  )"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#calendar-heat-map",
    "href": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#calendar-heat-map",
    "title": "Hands On Exercise 6",
    "section": "6.6.3 Calendar Heat Map",
    "text": "6.6.3 Calendar Heat Map\n\n\nCode\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, aes(x = hour, y = fct_rev(wkday), fill = n)) + \n  geom_tile(color = \"white\", size = 0.2) +\n  scale_fill_gradient(\n    name = \"# of Attacks\",\n    low = \"#f7c8d6\",\n    high = \"#300713\"\n  ) +\n  coord_equal() +\n  labs(\n    title = \"Attacks by Weekday and Time of Day\",\n    subtitle = \"Count of attacks by hour across weekdays\",\n    x = \"Hour of Day\",\n    y = NULL\n  ) +\n  theme_minimal(base_family = \"Helvetica\") +\n  theme(\n    panel.grid = element_blank(),\n    axis.ticks = element_blank(),\n    axis.text.y = element_text(size = 9),\n    axis.text.x = element_text(size = 9),\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(size = 10, hjust = 0.5, color = \"gray30\"),\n    legend.title = element_text(size = 9, face = \"bold\"),\n    legend.text = element_text(size = 8),\n    legend.position = \"bottom\"\n  )"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#time-series-using-ggplot2",
    "href": "HandsOn_Exercises/HandsOn_Ex06/HandsOnEx06.html#time-series-using-ggplot2",
    "title": "Hands On Exercise 6",
    "section": "6.6.4 Time Series using ggplot2",
    "text": "6.6.4 Time Series using ggplot2\n\n\nCode\nvietnam_ts &lt;- Vietnam %&gt;%\n  mutate(\n    date = ymd(paste(year, month, 1, sep = \"-\")),\n    visitors = Vietnam,\n    deviation = visitors - mean(visitors, na.rm = TRUE)\n  )\n\nggplot(vietnam_ts, aes(x = date)) +\n  geom_area(data = subset(vietnam_ts, deviation &gt;= 0),\n            aes(y = deviation), fill = \"#e41a1c\") +  # red for above avg\n  geom_area(data = subset(vietnam_ts, deviation &lt; 0),\n            aes(y = deviation), fill = \"#377eb8\") +  # blue for below avg\n  geom_hline(yintercept = 0, color = \"gray40\", linetype = \"dashed\") +\n  scale_x_date(date_breaks = \"6 months\", date_labels = \"%b %Y\") +\n  labs(\n    title = \"Visitor Arrivals from Vietnam (Deviation from Mean)\",\n    subtitle = \"Red indicates months above average, blue indicates below\",\n    y = \"Deviation from Average\",\n    x = NULL\n  ) +\n  theme_minimal(base_family = \"Helvetica\") +\n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5, size = 10, color = \"gray40\"),\n    axis.text.x = element_text(size = 8)\n  )"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08A/HandsOnEx08A.html",
    "href": "HandsOn_Exercises/HandsOn_Ex08A/HandsOnEx08A.html",
    "title": "Hands On Exercise 8A",
    "section": "",
    "text": "Note: Please toggle between ‘Show’ and ‘Hide’ above based on your preference for viewing the R codes."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08A/HandsOnEx08A.html#data",
    "href": "HandsOn_Exercises/HandsOn_Ex08A/HandsOnEx08A.html#data",
    "title": "Hands On Exercise 8A",
    "section": "8.3.1 Data",
    "text": "8.3.1 Data\nTwo data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08A/HandsOnEx08A.html#importing-geospatial-data-into-r",
    "href": "HandsOn_Exercises/HandsOn_Ex08A/HandsOnEx08A.html#importing-geospatial-data-into-r",
    "title": "Hands On Exercise 8A",
    "section": "8.3.2 Importing Geospatial Data into R",
    "text": "8.3.2 Importing Geospatial Data into R\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\n\nCode\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\sandr\\Documents\\sndrjcb\\ISSS608-VAA\\HandsOn_Exercises\\HandsOn_Ex08A\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08A/HandsOnEx08A.html#importing-attribute-data-into-r",
    "href": "HandsOn_Exercises/HandsOn_Ex08A/HandsOnEx08A.html#importing-attribute-data-into-r",
    "title": "Hands On Exercise 8A",
    "section": "8.3.3 Importing Attribute Data into R",
    "text": "8.3.3 Importing Attribute Data into R\nNext, we will import the respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popagsex. The task will be performed by using read_csv() function as shown below.\n\n\nCode\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08A/HandsOnEx08A.html#data-preparation",
    "href": "HandsOn_Exercises/HandsOn_Ex08A/HandsOnEx08A.html#data-preparation",
    "title": "Hands On Exercise 8A",
    "section": "8.3.4 Data Preparation",
    "text": "8.3.4 Data Preparation\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n8.3.4.1 Data wrangling\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\n\nCode\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n\n8.3.4.2 Joining the attribute data and geospatial data\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\n\nCode\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate(across(c(PA, SZ), toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\n\nCode\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nThing to learn from the code chunk above:\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\n\nCode\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08A/HandsOnEx08A.html#plotting-a-choropleth-map-quickly-by-using-qtm",
    "href": "HandsOn_Exercises/HandsOn_Ex08A/HandsOnEx08A.html#plotting-a-choropleth-map-quickly-by-using-qtm",
    "title": "Hands On Exercise 8A",
    "section": "8.4.1 Plotting a choropleth map quickly by using qtm()",
    "text": "8.4.1 Plotting a choropleth map quickly by using qtm()\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\n\nCode\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\nThings to learn from the code above:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08A/HandsOnEx08A.html#creating-a-choropleth-map-by-using-tmaps-elements",
    "href": "HandsOn_Exercises/HandsOn_Ex08A/HandsOnEx08A.html#creating-a-choropleth-map-by-using-tmaps-elements",
    "title": "Hands On Exercise 8A",
    "section": "8.4.2 Creating a choropleth map by using tmap’s elements",
    "text": "8.4.2 Creating a choropleth map by using tmap’s elements\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\", \n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\nIn the following sub-section, we will share with you tmap functions that used to plot these elements.\n\n8.4.2.1 Drawing a base map\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\n\nCode\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n\n8.4.2.2 Drawing a choropleth map using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\nThings to learn from tm_polygons():\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\n8.4.2.3 Drawing a choropleth map using tm_fill() and *tm_border()**\nActually, tm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map. The code chunk below draws a choropleth map by using tm_fill() alone.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values. To add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\") +\n  tm_borders(lwd = 0.01,  \n             fill_alpha = 0.1)\n\n\n\n\n\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08A/HandsOnEx08A.html#data-classification-methods-of-tmap",
    "href": "HandsOn_Exercises/HandsOn_Ex08A/HandsOnEx08A.html#data-classification-methods-of-tmap",
    "title": "Hands On Exercise 8A",
    "section": "8.4.3 Data classification methods of tmap",
    "text": "8.4.3 Data classification methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n8.4.3.1 Plotting choropleth maps with built-in classification methods\nThe code chunk below shows a quantile data classification that used 5 classes.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\nIn the code chunk below, equal data classification method is used.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"equal\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\nWarning: Maps Lie!\n\n\nDIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.\n\n\nDIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?\n\n\n\n8.4.3.2 Plotting choropleth map with custome break\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\n\nCode\nsummary(mpsz_pop2020$DEPENDENCY)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7867  0.8585  0.8763 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, we will plot the choropleth map by using the code chunk below.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(fill_alpha = 0.5)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08A/HandsOnEx08A.html#colour-scheme",
    "href": "HandsOn_Exercises/HandsOn_Ex08A/HandsOnEx08A.html#colour-scheme",
    "title": "Hands On Exercise 8A",
    "section": "8.4.4 Colour Scheme",
    "text": "8.4.4 Colour Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\n8.4.4.1 Using ColourBrewer palette\nTo change the colour, we assign the preferred colour to values argument of tm_scale_intervals() as shown in the code chunk below.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"quantile\",\n        n = 5,\n        values = \"brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\nNotice that the choropleth map is shaded in green.\nTo reverse the colour shading, add a “-” prefix.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"quantile\",\n        n = 5,\n        values = \"-brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08A/HandsOnEx08A.html#map-layouts",
    "href": "HandsOn_Exercises/HandsOn_Ex08A/HandsOnEx08A.html#map-layouts",
    "title": "Hands On Exercise 8A",
    "section": "8.4.5 Map Layouts",
    "text": "8.4.5 Map Layouts\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n8.4.5.1 Map Legend\nIn tmap, several tm_legend() options are provided to change the placement, format and appearance of the legend.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 5,\n        values = \"brewer.greens\"),\n      fill.legend = tm_legend(\n        title = \"Dependency ratio\")) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\")\n\n\n\n\n\n\n\n\n\n\n\n8.4.5.2 Map style\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n\n\n\n\n8.4.5.3 Cartographic Furniture\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\", \n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08A/HandsOnEx08A.html#drawing-small-multiple-choropleth-maps",
    "href": "HandsOn_Exercises/HandsOn_Ex08A/HandsOnEx08A.html#drawing-small-multiple-choropleth-maps",
    "title": "Hands On Exercise 8A",
    "section": "8.4.6 Drawing Small Multiple Choropleth Maps",
    "text": "8.4.6 Drawing Small Multiple Choropleth Maps\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n8.4.6.1 By assigning multiple values to at least one of the aesthetic arguments\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\n\n\n\n8.4.6.2 By defining a group-by variable in tm_facets()\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\n\nCode\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n8.4.6.3 By creating multiple stand-alone maps with tmap_arrange()\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\n\nCode\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08A/HandsOnEx08A.html#mappping-spatial-object-meeting-a-selection-criterion",
    "href": "HandsOn_Exercises/HandsOn_Ex08A/HandsOnEx08A.html#mappping-spatial-object-meeting-a-selection-criterion",
    "title": "Hands On Exercise 8A",
    "section": "8.4.7 Mappping Spatial Object Meeting a Selection Criterion",
    "text": "8.4.7 Mappping Spatial Object Meeting a Selection Criterion\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\n\nCode\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08B/HandsOnEx08B.html",
    "href": "HandsOn_Exercises/HandsOn_Ex08B/HandsOnEx08B.html",
    "title": "Hands On Exercise 8B",
    "section": "",
    "text": "Note: Please toggle between ‘Show’ and ‘Hide’ above based on your preference for viewing the R codes."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08B/HandsOnEx08B.html#learning-outcome",
    "href": "HandsOn_Exercises/HandsOn_Ex08B/HandsOnEx08B.html#learning-outcome",
    "title": "Hands On Exercise 8B",
    "section": "8.1.1 Learning Outcome",
    "text": "8.1.1 Learning Outcome\nBy the end of this hands-on exercise, you will acquire the following skills by using appropriate R packages:\n\nTo import an aspatial data file into R.\nTo convert it into simple point feature data frame and at the same time, to assign an appropriate projection reference to the newly create simple point feature data frame.\nTo plot interactive proportional symbol maps."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08B/HandsOnEx08B.html#data",
    "href": "HandsOn_Exercises/HandsOn_Ex08B/HandsOnEx08B.html#data",
    "title": "Hands On Exercise 8B",
    "section": "8.3.1 Data",
    "text": "8.3.1 Data\nThe data set use for this hands-on exercise is called SGPools_svy21. The data is in csv file format. The XCOORD and YCOORD columns are the x-coordinates and y-coordinates of SingPools outlets and branches. They are in the Singapore SVY21 Projected Coordinates System."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08B/HandsOnEx08B.html#data-import-and-preparation",
    "href": "HandsOn_Exercises/HandsOn_Ex08B/HandsOnEx08B.html#data-import-and-preparation",
    "title": "Hands On Exercise 8B",
    "section": "8.3.2 Data Import and Preparation",
    "text": "8.3.2 Data Import and Preparation\nThe code chunk below uses read_csv() function of readr package to import SGPools_svy21.csv into R as a tibble data frame called sgpools.\n\n\nCode\nsgpools &lt;- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly. The code below shows list() is used to do the job.\n\n\nCode\nlist(sgpools) \n\n\n[[1]]\n# A tibble: 306 × 7\n   NAME           ADDRESS POSTCODE XCOORD YCOORD `OUTLET TYPE` `Gp1Gp2 Winnings`\n   &lt;chr&gt;          &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Mar… 2 Bayf…    18972 30842. 29599. Branch                        5\n 2 Livewire (Res… 26 Sen…    98138 26704. 26526. Branch                       11\n 3 SportsBuzz (K… Lotus …   738078 20118. 44888. Branch                        0\n 4 SportsBuzz (P… 1 Sele…   188306 29777. 31382. Branch                       44\n 5 Prime Serango… Blk 54…   552542 32239. 39519. Branch                        0\n 6 Singapore Poo… 1A Woo…   731001 21012. 46987. Branch                        3\n 7 Singapore Poo… Blk 64…   370064 33990. 34356. Branch                       17\n 8 Singapore Poo… Blk 88…   370088 33847. 33976. Branch                       16\n 9 Singapore Poo… Blk 30…   540308 33910. 41275. Branch                       21\n10 Singapore Poo… Blk 20…   560202 29246. 38943. Branch                       25\n# ℹ 296 more rows\n\n\nNotice that the sgpools data in tibble data frame and not the common R data frame."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08B/HandsOnEx08B.html#creating-a-sf-data-frame-from-an-aspatial-data-frame",
    "href": "HandsOn_Exercises/HandsOn_Ex08B/HandsOnEx08B.html#creating-a-sf-data-frame-from-an-aspatial-data-frame",
    "title": "Hands On Exercise 8B",
    "section": "8.3.3 Creating a sf data frame from an aspatial data frame",
    "text": "8.3.3 Creating a sf data frame from an aspatial data frame\nThe code chunk below converts sgpools data frame into a simple feature data frame by using st_as_sf() of sf packages\n\n\nCode\nsgpools_sf &lt;- st_as_sf(sgpools,                         \n                       coords = c(\"XCOORD\", \"YCOORD\"),                        \n                       crs= 3414)\n\n\nThings to learn from the arguments above:\n\nThe coords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\nThe crs argument required you to provide the coordinates system in epsg format. EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by refering to epsg.io.\n\nYou can display the basic information of the newly created sgpools_sf by using the code chunk below.\n\n\nCode\nlist(sgpools_sf)\n\n\n[[1]]\nSimple feature collection with 306 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 7844.194 ymin: 26525.7 xmax: 45176.57 ymax: 47987.13\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 306 × 6\n   NAME                         ADDRESS POSTCODE `OUTLET TYPE` `Gp1Gp2 Winnings`\n * &lt;chr&gt;                        &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Marina Bay Sands)  2 Bayf…    18972 Branch                        5\n 2 Livewire (Resorts World Sen… 26 Sen…    98138 Branch                       11\n 3 SportsBuzz (Kranji)          Lotus …   738078 Branch                        0\n 4 SportsBuzz (PoMo)            1 Sele…   188306 Branch                       44\n 5 Prime Serangoon North        Blk 54…   552542 Branch                        0\n 6 Singapore Pools Woodlands C… 1A Woo…   731001 Branch                        3\n 7 Singapore Pools 64 Circuit … Blk 64…   370064 Branch                       17\n 8 Singapore Pools 88 Circuit … Blk 88…   370088 Branch                       16\n 9 Singapore Pools Anchorvale … Blk 30…   540308 Branch                       21\n10 Singapore Pools Ang Mo Kio … Blk 20…   560202 Branch                       25\n# ℹ 296 more rows\n# ℹ 1 more variable: geometry &lt;POINT [m]&gt;\n\n\nThe output shows that sgppols_sf is in point feature class. It’s epsg ID is 3414. The bbox provides information of the extend of the geospatial data."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08B/HandsOnEx08B.html#it-all-started-with-an-interactive-point-symbol-map",
    "href": "HandsOn_Exercises/HandsOn_Ex08B/HandsOnEx08B.html#it-all-started-with-an-interactive-point-symbol-map",
    "title": "Hands On Exercise 8B",
    "section": "8.4.1 It all started with an interactive point symbol map",
    "text": "8.4.1 It all started with an interactive point symbol map\nThe code chunks below are used to create an interactive point symbol map.\n\n\nCode\ntm_shape(sgpools_sf) + \n  tm_bubbles(fill = \"red\",\n           size = 1,\n           col = \"black\",\n           lwd = 1)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08B/HandsOnEx08B.html#lets-make-it-proportional",
    "href": "HandsOn_Exercises/HandsOn_Ex08B/HandsOnEx08B.html#lets-make-it-proportional",
    "title": "Hands On Exercise 8B",
    "section": "8.4.2 Lets make it proportional",
    "text": "8.4.2 Lets make it proportional\nTo draw a proportional symbol map, we need to assign a numerical variable to the size visual attribute. The code chunks below show that the variable Gp1Gp2Winnings is assigned to size visual attribute.\n\n\nCode\ntm_shape(sgpools_sf) + \n  tm_bubbles(fill = \"red\",\n             size = \"Gp1Gp2 Winnings\",\n             col = \"black\",\n             lwd = 1)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08B/HandsOnEx08B.html#lets-give-it-a-different-colour",
    "href": "HandsOn_Exercises/HandsOn_Ex08B/HandsOnEx08B.html#lets-give-it-a-different-colour",
    "title": "Hands On Exercise 8B",
    "section": "8.4.3 Lets give it a different colour",
    "text": "8.4.3 Lets give it a different colour\nThe proportional symbol map can be further improved by using the colour visual attribute. In the code chunks below, OUTLET_TYPE variable is used as the colour attribute variable.\n\n\nCode\ntm_shape(sgpools_sf) + \n  tm_bubbles(fill = \"OUTLET TYPE\", \n             size = \"Gp1Gp2 Winnings\",\n             col = \"black\",\n             lwd = 1)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08B/HandsOnEx08B.html#i-have-a-twin-brothers",
    "href": "HandsOn_Exercises/HandsOn_Ex08B/HandsOnEx08B.html#i-have-a-twin-brothers",
    "title": "Hands On Exercise 8B",
    "section": "8.4.4 I have a twin brothers :)",
    "text": "8.4.4 I have a twin brothers :)\nAn impressive and little-know feature of tmap’s view mode is that it also works with faceted plots. The argument sync in tm_facets() can be used in this case to produce multiple maps with synchronised zoom and pan settings.\n\n\nCode\ntm_shape(sgpools_sf) + \n  tm_bubbles(fill = \"OUTLET TYPE\", \n             size = \"Gp1Gp2 Winnings\",\n             col = \"black\",\n             lwd = 1) + \n  tm_facets(by= \"OUTLET TYPE\",\n            nrow = 1,\n            sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore you end the session, it is wiser to switch tmap’s Viewer back to plot mode by using the code chunk below.\n\n\nCode\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08C/HandsOnEx08C.html",
    "href": "HandsOn_Exercises/HandsOn_Ex08C/HandsOnEx08C.html",
    "title": "Hands On Exercise 8C",
    "section": "",
    "text": "Note: Please toggle between ‘Show’ and ‘Hide’ above based on your preference for viewing the R codes."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08C/HandsOnEx08C.html#objectives",
    "href": "HandsOn_Exercises/HandsOn_Ex08C/HandsOnEx08C.html#objectives",
    "title": "Hands On Exercise 8C",
    "section": "8.1.1 Objectives",
    "text": "8.1.1 Objectives\nIn this in-class exercise, you will gain hands-on experience on using appropriate R methods to plot analytical maps."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08C/HandsOnEx08C.html#learning-outcome",
    "href": "HandsOn_Exercises/HandsOn_Ex08C/HandsOnEx08C.html#learning-outcome",
    "title": "Hands On Exercise 8C",
    "section": "8.1.2 Learning Outcome",
    "text": "8.1.2 Learning Outcome\nBy the end of this in-class exercise, you will be able to use appropriate functions of tmap and tidyverse to perform the following tasks:\n\nImporting geospatial data in rds format into R environment.\nCreating cartographic quality choropleth maps by using appropriate tmap functions.\nCreating rate map\nCreating percentile map\nCreating boxmap"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08C/HandsOnEx08C.html#installing-and-loading-packages",
    "href": "HandsOn_Exercises/HandsOn_Ex08C/HandsOnEx08C.html#installing-and-loading-packages",
    "title": "Hands On Exercise 8C",
    "section": "8.2.1 Installing and loading Packages",
    "text": "8.2.1 Installing and loading Packages\n\n\nCode\npacman::p_load(tmap, tidyverse, sf)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08C/HandsOnEx08C.html#importing-data",
    "href": "HandsOn_Exercises/HandsOn_Ex08C/HandsOnEx08C.html#importing-data",
    "title": "Hands On Exercise 8C",
    "section": "8.2.2 Importing Data",
    "text": "8.2.2 Importing Data\nFor the purpose of this hands-on exercise, a prepared data set called NGA_wp.rds will be used. The data set is a polygon feature data.frame providing information on water point of Nigeria at the LGA level. You can find the data set in the rds sub-direct of the hands-on data folder.\n\n\nCode\nNGA_wp &lt;- read_rds(\"data/rds/NGA_wp.rds\")"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08C/HandsOnEx08C.html#visualising-distribution-of-non-functional-water-point",
    "href": "HandsOn_Exercises/HandsOn_Ex08C/HandsOnEx08C.html#visualising-distribution-of-non-functional-water-point",
    "title": "Hands On Exercise 8C",
    "section": "8.3.1 Visualising distribution of non-functional water point",
    "text": "8.3.1 Visualising distribution of non-functional water point\nPloting a choropleth map showing the distribution of non-function water point by LGA.\n\n\nCode\np1 &lt;- tm_shape(NGA_wp) +\n  tm_polygons(fill = \"wp_functional\",\n             fill.scale = tm_scale_intervals(\n               style = \"equal\",\n               n = 10,\n               values = \"brewer.blues\"),\n             fill.legend = tm_legend(\n               position = c(\"right\", \"bottom\"))) +\n  tm_borders(lwd = 0.1,\n             fill_alpha = 1) +\n  tm_title(\"Distribution of functional water point by LGAs\")\n\n\n\n\nCode\np2 &lt;- tm_shape(NGA_wp) + \n  tm_polygons(fill = \"total_wp\", \n              fill.scale = tm_scale_intervals(\n                style = \"equal\",\n                n = 10,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                position = c(\"right\", \"bottom\"))) +\n  tm_borders(lwd = 0.1, \n             fill_alpha = 1) + \n  tm_title(\"Distribution of total  water point by LGAs\")\n\n\n\n\nCode\ntmap_arrange(p2, p1, nrow = 1)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08C/HandsOnEx08C.html#deriving-proportion-of-functional-water-points-and-non-functional-water-points",
    "href": "HandsOn_Exercises/HandsOn_Ex08C/HandsOnEx08C.html#deriving-proportion-of-functional-water-points-and-non-functional-water-points",
    "title": "Hands On Exercise 8C",
    "section": "8.4.1 Deriving Proportion of Functional Water Points and Non-Functional Water Points",
    "text": "8.4.1 Deriving Proportion of Functional Water Points and Non-Functional Water Points\nWe will tabulate the proportion of functional water points and the proportion of non-functional water points in each LGA. In the following code chunk, mutate() from dplyr package is used to derive two fields, namely pct_functional and pct_nonfunctional.\n\n\nCode\nNGA_wp &lt;- NGA_wp %&gt;%\n  mutate(pct_functional = wp_functional/total_wp) %&gt;%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08C/HandsOnEx08C.html#plotting-map-of-rate",
    "href": "HandsOn_Exercises/HandsOn_Ex08C/HandsOnEx08C.html#plotting-map-of-rate",
    "title": "Hands On Exercise 8C",
    "section": "8.4.2 Plotting map of rate",
    "text": "8.4.2 Plotting map of rate\nPlotting a choropleth map showing the distribution of percentage functional water point by LGA.\n\n\nCode\ntm_shape(NGA_wp) +\n  tm_polygons(\"pct_functional\",\n              fill.scale = tm_scale_intervals(\n                style = \"equal\",\n                n = 10,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                position = c(\"right\", \"bottom\"))) + \n  tm_borders(lwd = 0.1,\n             fill_alpha = 1) +\n  tm_title(\"Rate map of functional water point by LGAs\")"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex08C/HandsOnEx08C.html#percentile-map",
    "href": "HandsOn_Exercises/HandsOn_Ex08C/HandsOnEx08C.html#percentile-map",
    "title": "Hands On Exercise 8C",
    "section": "8.5.1 Percentile Map",
    "text": "8.5.1 Percentile Map\nThe percentile map is a special type of quantile map with six specific categories: 0-1%,1-10%, 10-50%,50-90%,90-99%, and 99-100%. The corresponding breakpoints can be derived by means of the base R quantile command, passing an explicit vector of cumulative probabilities as c(0,.01,.1,.5,.9,.99,1). Note that the begin and endpoint need to be included.\n\n8.5.1.1 Data Preparation\nStep 1: Exclude records with NA by using the code chunk below.\n\n\nCode\nNGA_wp &lt;- NGA_wp %&gt;%   \n  drop_na()\n\n\nStep 2: Creating customised classification and extracting values\n\n\nCode\npercent &lt;- c(0,.01,.1,.5,.9,.99,1)\nvar &lt;- NGA_wp[\"pct_functional\"] %&gt;%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n\n\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n\n\nWhen variables are extracted from an sf data.frame, the geometry is extracted as well. For mapping and spatial manipulation, this is the expected behavior, but many base R functions cannot deal with the geometry. Specifically, the quantile() gives an error. As a result st_set_geomtry(NULL) is used to drop geomtry field.\n\n\n8.5.1.2 Why writing functions?\nWriting a function has three big advantages over using copy-and-paste:\n\nYou can give a function an evocative name that makes your code easier to understand.\nAs requirements change, you only need to update code in one place, instead of many.\nYou eliminate the chance of making incidental mistakes when you copy and paste (i.e. updating a variable name in one place, but not in another).\n\nSource: Chapter 19: Functions of R for Data Science.\n\n\n8.5.1.3 Creating the get.var function\nFirstly, we will write an R function as shown below to extract a variable (i.e. wp_nonfunctional) as a vector out of an sf data.frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\n\nCode\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% \n    st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\n\n8.5.1.4 A percentile mapping function\nNext, we will write a percentile mapping function by using the code chunk below.\n\n\nCode\npercentmap &lt;- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent &lt;- c(0,.01,.1,.5,.9,.99,1)\n  var &lt;- get.var(vnam, df)\n  bperc &lt;- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_polygons(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"&lt; 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"&gt; 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n\n\n\n\n8.5.1.5 Test drive the percentile mapping function\nTo run the function, type the code chunk as shown below.\n\n\nCode\npercentmap(\"total_wp\", NGA_wp)\n\n\n\n\n\n\n\n\n\nNote that this is just a bare bones implementation. Additional arguments such as the title, legend positioning just to name a few of them, could be passed to customise various features of the map."
  },
  {
    "objectID": "InClass_Exercises/InClass_Ex02/InClassEx02.html",
    "href": "InClass_Exercises/InClass_Ex02/InClassEx02.html",
    "title": "In Class Exercise 2",
    "section": "",
    "text": "&lt;img src=“https://public.tableau.com/static/images/Su/SuperstoreIn-ClassExercise03/Salesvs_Profit/1_rss.png’ alt=‘Sales vs Profit’ style=‘border: none’/&gt;"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html",
    "href": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "Note: Please toggle between ‘Show’ and ‘Hide’ above based on your preference for viewing the R codes."
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#loading-packages",
    "href": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#loading-packages",
    "title": "Take Home Exercise 1",
    "section": "1.3.1 Loading packages",
    "text": "1.3.1 Loading packages\nWe load the following R packages using the pacman::p_load() function:\n\ntidyverse: Core collection of R packages designed for data science.\nhaven: To read in data formats such as SAS and SPSS.\nggrepel: To provide geoms for ggplot2 to repel overlapping text labels.\nggthemes: To use additional themes for ggplot2.\npatchwork: To prepare composite figures created using ggplot2.\nggridges: To plot ridgeline plots.\nggdist: For visualizations of distributions and uncertainty.\nscales: Provides the internal scaling infrastructure used by ggplot2.\nmatrixStats: Provides efficient functions for row and column operations on matrices and data frames.\ntreemapify: Allows the creation of treemap visualizations using ggplot2 syntax.\nshowtext: Enables the use of custom fonts in R plots for better typography.\n\n\n\nCode\npacman::p_load(tidyverse, haven,\n               ggrepel, ggthemes,\n               ggridges, ggdist,colorspace,ggdist,\n               patchwork, scales, ggplot2, \n               matrixStats, treemapify, showtext)"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#importing-data",
    "href": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#importing-data",
    "title": "Take Home Exercise 1",
    "section": "1.3.2 Importing Data",
    "text": "1.3.2 Importing Data\nThe dataset used in the exercise is Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024, retrieved from the Department of Statistics, Singapore. Let’s import this dataset as rrespopagesex2024 and how the dataset looks like.\n\n\nCode\nrespopagesex2024 &lt;- read_csv(\"respopagesex2024.csv\")\nshow_col_types = FALSE\n\nknitr::kable(head(respopagesex2024))\n\n\n\n\n\nPA\nSZ\nAge\nSex\nPop\nTime\n\n\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n0\nMales\n10\n2024\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n0\nFemales\n10\n2024\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n1\nMales\n10\n2024\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n1\nFemales\n10\n2024\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n2\nMales\n10\n2024\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n2\nFemales\n10\n2024"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#glimpse",
    "href": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#glimpse",
    "title": "Take Home Exercise 1",
    "section": "1.4.1 Glimpse",
    "text": "1.4.1 Glimpse\n\n\nCode\nglimpse(respopagesex2024)\n\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\n\nBased on the result, there are 60,424 records, which is consistent with the CSV file, indicating that there are no missing records while importing. There are 6 variables, and the corresponding datatypes are shown as well. Take note that Age is defined as a character, so we will be converting that to a numeric data type later."
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#checking-for-duplicate-values",
    "href": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#checking-for-duplicate-values",
    "title": "Take Home Exercise 1",
    "section": "1.4.2 Checking for duplicate values",
    "text": "1.4.2 Checking for duplicate values\nUsing the duplicated function, we see that there are no duplicate entries in the data.\n\n\nCode\nrespopagesex2024[duplicated(respopagesex2024),]\n\n\n# A tibble: 0 × 6\n# ℹ 6 variables: PA &lt;chr&gt;, SZ &lt;chr&gt;, Age &lt;chr&gt;, Sex &lt;chr&gt;, Pop &lt;dbl&gt;,\n#   Time &lt;dbl&gt;"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#additional-variables",
    "href": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#additional-variables",
    "title": "Take Home Exercise 1",
    "section": "1.4.3 Additional Variables",
    "text": "1.4.3 Additional Variables\nThere are 55 planning zones and 332 subzones in Singapore, which is consistent with this dataset. However, I felt that exploring each subzone individually would not be practical for a high-level analysis. So, a ‘Region’ column is added to the dataset, indicating which of the five major regions (East, West, North, North-East, or Central) each planning zone belongs to. This grouping makes it easier to understand broad demographic patterns across Singapore. To achieve this, an additional dataset from Wikipedia listing the planning zones and their corresponding regions was used. A left join is performed to link these two datasets using the function left_join().\n\n\nCode\nplanning_areas &lt;- read_csv(\"Planning_areas_of_Singapore_2.csv\")\n\n# Check column names\ncolnames(respopagesex2024)\n\n\n[1] \"PA\"   \"SZ\"   \"Age\"  \"Sex\"  \"Pop\"  \"Time\"\n\n\nCode\ncolnames(planning_areas)\n\n\n [1] \"Name (English)\" \"Malay\"          \"Chinese\"        \"Pinyin\"        \n [5] \"Tamil\"          \"Region\"         \"Area (km2)\"     \"Population\"    \n [9] \"Density (/km2)\" \"Subzones\"      \n\n\nCode\nrespop_with_region &lt;- respopagesex2024 %&gt;%\n  left_join(planning_areas, by = c(\"PA\" = \"Name (English)\"))\n\nglimpse(respop_with_region)\n\n\nRows: 60,424\nColumns: 15\n$ PA               &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio…\n$ SZ               &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"…\n$ Age              &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\"…\n$ Sex              &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Fem…\n$ Pop              &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 3…\n$ Time             &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n$ Malay            &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Chinese          &lt;chr&gt; \"宏茂桥\", \"宏茂桥\", \"宏茂桥\", \"宏茂桥\", \"宏茂桥\", \"宏茂桥\", \"宏茂桥\", \"宏茂桥…\n$ Pinyin           &lt;chr&gt; \"Hóngmàoqiáo\", \"Hóngmàoqiáo\", \"Hóngmàoqiáo\", \"Hóngmào…\n$ Tamil            &lt;chr&gt; \"ஆங் மோ கியோ\", \"ஆங் மோ கியோ\", \"ஆங் மோ கியோ\", \"ஆங் மோ கியோ\", \"ஆங் மோ கியோ\"…\n$ Region           &lt;chr&gt; \"North-East\", \"North-East\", \"North-East\", \"North-East…\n$ `Area (km2)`     &lt;dbl&gt; 13.94, 13.94, 13.94, 13.94, 13.94, 13.94, 13.94, 13.9…\n$ Population       &lt;chr&gt; \"161,000\", \"161,000\", \"161,000\", \"161,000\", \"161,000\"…\n$ `Density (/km2)` &lt;chr&gt; \"13,400\", \"13,400\", \"13,400\", \"13,400\", \"13,400\", \"13…\n$ Subzones         &lt;chr&gt; \"12\", \"12\", \"12\", \"12\", \"12\", \"12\", \"12\", \"12\", \"12\",…\n\n\nCode\nknitr::kable(head(respop_with_region))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPA\nSZ\nAge\nSex\nPop\nTime\nMalay\nChinese\nPinyin\nTamil\nRegion\nArea (km2)\nPopulation\nDensity (/km2)\nSubzones\n\n\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n0\nMales\n10\n2024\nNA\n宏茂桥\nHóngmàoqiáo\nஆங் மோ கியோ\nNorth-East\n13.94\n161,000\n13,400\n12\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n0\nFemales\n10\n2024\nNA\n宏茂桥\nHóngmàoqiáo\nஆங் மோ கியோ\nNorth-East\n13.94\n161,000\n13,400\n12\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n1\nMales\n10\n2024\nNA\n宏茂桥\nHóngmàoqiáo\nஆங் மோ கியோ\nNorth-East\n13.94\n161,000\n13,400\n12\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n1\nFemales\n10\n2024\nNA\n宏茂桥\nHóngmàoqiáo\nஆங் மோ கியோ\nNorth-East\n13.94\n161,000\n13,400\n12\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n2\nMales\n10\n2024\nNA\n宏茂桥\nHóngmàoqiáo\nஆங் மோ கியோ\nNorth-East\n13.94\n161,000\n13,400\n12\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n2\nFemales\n10\n2024\nNA\n宏茂桥\nHóngmàoqiáo\nஆங் மோ கியோ\nNorth-East\n13.94\n161,000\n13,400\n12"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#selecting-primary-variables",
    "href": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#selecting-primary-variables",
    "title": "Take Home Exercise 1",
    "section": "1.4.4 Selecting Primary Variables",
    "text": "1.4.4 Selecting Primary Variables\nThe primary variables chosen for this exercise are given below.\n\n\n\n\n\n\n\nField Name\nField Description\n\n\n\n\nPA\nName of planning area where the population record belongs\n\n\nSZ\nName of subzone within the planning area\n\n\nAge\nAge of the individuals\n\n\nSex\nGender of the population group\n\n\nPop\nTotal population count for the given age, sex, and location\n\n\nRegion\nBroad geographic region linked to each planning area\n\n\n\nRemaining variables will be excluded to give the cleaned dataset - respop_cleaned.\n\n\nCode\nrespop_cleaned &lt;- respop_with_region %&gt;%\n  select(-`Time`, -`Malay`, -`Chinese`, -`Pinyin`, -`Tamil`, -`Area (km2)`, -`Population`, -`Density (/km2)`, -`Subzones`)\n\nknitr::kable(head(respop_cleaned))\n\n\n\n\n\nPA\nSZ\nAge\nSex\nPop\nRegion\n\n\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n0\nMales\n10\nNorth-East\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n0\nFemales\n10\nNorth-East\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n1\nMales\n10\nNorth-East\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n1\nFemales\n10\nNorth-East\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n2\nMales\n10\nNorth-East\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n2\nFemales\n10\nNorth-East\n\n\n\n\n\nCode\nglimpse(respop_cleaned)\n\n\nRows: 60,424\nColumns: 6\n$ PA     &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo…\n$ SZ     &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio…\n$ Age    &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\"…\n$ Sex    &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Ma…\n$ Pop    &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10,…\n$ Region &lt;chr&gt; \"North-East\", \"North-East\", \"North-East\", \"North-East\", \"North-…"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#gender-ratio-analysis-by-region",
    "href": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#gender-ratio-analysis-by-region",
    "title": "Take Home Exercise 1",
    "section": "1.5.1 Gender Ratio Analysis by Region",
    "text": "1.5.1 Gender Ratio Analysis by Region\n\n\nCode\ngender_summary_long &lt;- respop_cleaned %&gt;%\n  group_by(Region, Sex) %&gt;%\n  summarise(Total_Pop = sum(Pop), .groups = \"drop\")\n\n#Calculate total population per region\ngender_summary_long &lt;- gender_summary_long %&gt;%\n  group_by(Region) %&gt;%\n  mutate(\n    Region_Total = sum(Total_Pop),\n    Percent = (Total_Pop / Region_Total) * 100\n  )\n\n#Plot side-by-side bars\nggplot(gender_summary_long, aes(x = Region, y = Total_Pop, fill = Sex)) +\n  geom_col(position = \"dodge\") +\n  geom_text(\n    aes(label = paste0(round(Percent, 1), \"%\")),\n    position = position_dodge(width = 0.9),\n    vjust = -0.5,\n    size = 3, family = \"nunito\"\n  ) +\n  labs(\n    title = \"Male and Female Population by Region\",\n    x = \"Region\",\n    y = \"Total Population\"\n  ) +\n  scale_y_continuous(labels = scales::comma) +\n  theme_minimal(base_family = \"nunito\") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5),plot.title = element_text(hjust = 0.5, size = 15, face = \"bold\", family = \"nunito\")) +\n  scale_fill_manual(values = c(\"Females\" = \"#662633\", \"Males\" = \"#2C3C60\"))\n\n\n\n\n\n\n\n\n\nInsights:\n\nIn all five regions, females make up a slightly higher percentage of the total population, with the Central and North-East regions showing the largest gaps.\nThe total population size varies significantly by region. Central and North-East regions have noticeably larger total populations compared to the North, East, and West, highlighting regional population concentration and urban density differences.\nDespite minor percentage differences, the male-to-female split remains close to 50 - 50 in all regions, suggesting a stable and balanced gender distribution at the regional level in Singapore."
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#region-wise-age-distribution-using-multiple-density-plots",
    "href": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#region-wise-age-distribution-using-multiple-density-plots",
    "title": "Take Home Exercise 1",
    "section": "1.5.2 Region-wise Age Distribution Using Multiple Density Plots",
    "text": "1.5.2 Region-wise Age Distribution Using Multiple Density Plots\nAge is stored as a character datatype because it contains values ‘90_and_Over’ to represent residents aged over 90. To simplify this for an age distribution, these records will be recoded as ‘90’ before converting them to a numeric datatype.\n\n\nCode\nrespop_cleaned &lt;- respop_cleaned %&gt;%\n  mutate(\n    Age = as.character(Age),\n    Age = ifelse(Age == \"90_and_Over\", \"90\", Age),\n    Age = as.numeric(Age)\n)\n\n# Calculate age with highest density per region\nmode_age &lt;- respop_cleaned %&gt;%\n  group_by(Region) %&gt;%\n  group_split() %&gt;%\n  map_df(~ {\n    d &lt;- density(rep(.x$Age, .x$Pop))\n    data.frame(\n      Region = unique(.x$Region),\n      mode_age = d$x[which.max(d$y)]\n    )\n  })\n\n# Plot with vertical mode lines\nggplot(respop_cleaned, aes(x = Age, weight = Pop, fill = Region)) +\n  geom_density(alpha = 0.6, adjust = 1) +\n  geom_vline(data = mode_age, aes(xintercept = mode_age), color = \"black\", linetype = \"dashed\", size = 0.8) + \n  geom_text(\n    data = mode_age,\n    mapping = aes(x = mode_age, y = 0, label = paste0(\"Peak: \", round(mode_age, 1))),\n    inherit.aes = FALSE,\n    angle = 90, vjust = -0.5, hjust = 1.1, size = 3\n  ) +\n  facet_wrap(~ Region, scales = \"free_y\", ncol = 2) +\n  labs(\n    title = \"Age Distribution by Region in Singapore (Weighted by Population)\",\n    subtitle = \"Dashed line indicates age with highest density (mode)\",\n    x = \"Age\",\n    y = \"Density\"\n  ) +\n  theme(legend.position = \"none\") +\n  theme_minimal(base_family = \"nunito\") + theme(legend.position = \"none\",axis.text.x = element_text(angle = 90, vjust = 0.5),plot.title = element_text(hjust = 0.5, size = 30, face = \"bold\", family = \"nunito\")) +\n  scale_fill_manual(values = c(\"West\" = \"#145C47\", \"East\" = \"#2C3C60\", \"North\" = \"#662633\",\"North-East\" = \"#4B2C60\",\"Central\" = \"#665C26\"))\n\n\n\n\n\n\n\n\n\nInsights:\n\nAcross all five regions in Singapore, the density curves show peaks between ages 20 – 40, suggesting these age groups make up the largest share of the population. This reflects a working-age dominance that is prevalent in urban and developed countries.\nThe dashed vertical lines marking the modal age (most common) appear at nearly the same point for all regions, which is around 30 - 35 year olds. This indicates a consistent demographic structure across Singapore’s regions.\nWhile younger and middle-aged groups dominate, all regions show a gradual decline in density after age 50 – 60, reflecting lower population counts at older ages. Future policies focus on potential improvements for aging populations, like healthcare support and elderly welfare."
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#total-population-by-planning-areas-in-all-regions",
    "href": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#total-population-by-planning-areas-in-all-regions",
    "title": "Take Home Exercise 1",
    "section": "1.5.3 Total Population by Planning Areas in all Regions",
    "text": "1.5.3 Total Population by Planning Areas in all Regions\n\n\nCode\n# Summarize total population by planning area for each region\nplanning_area_summary &lt;- respop_cleaned %&gt;%\n  group_by(Region, PA) %&gt;%\n  summarise(Total_Pop = sum(Pop), .groups = \"drop\")\n\n# Bar chart\nggplot(planning_area_summary, aes(x = reorder(PA, -Total_Pop), y = Total_Pop, fill = Region)) +\n  geom_col() +\n  facet_wrap(~ Region, scales = \"free_x\") +\n  labs(title = \"Total Population by Planning Area (within Each Region)\", x = \"Planning Area\", y = \"Population\") +\n  scale_y_continuous(labels = scales::comma) +\n  theme_minimal(base_family = \"nunito\",base_size = 25) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5),plot.title = element_text(hjust = 0.5, size = 30, face = \"bold\", family = \"nunito\")) +\n  scale_fill_manual(values = c(\"West\" = \"#145C47\", \"East\" = \"#2C3C60\", \"North\" = \"#662633\",\"North-East\" = \"#4B2C60\",\"Central\" = \"#665C26\"))\n\n\n\n\n\n\n\n\n\nInsights:\n\nPopulation is heavily concentrated in a few dominant planning areas within each region. For example, Tampines (East), Woodlands (North), Sengkang (North-East), and Jurong West (West) stand out as the most populous planning areas, suggesting that they are clearly urban hubs.\nWhile there are numerous planning areas in Central, only a few (like Bukit Merah, Queenstown, and Toa Payoh) hold large populations. Other areas have relatively small populations of Singaporean residents, due to the presence of commercial, or low-residence zones like Orchard and Marina South.\nSome planning areas have extremely low or negligible residential populations. Places like Lim Chu Kang, Central Water Catchment, and Western Islands show almost no population, indicating these are likely reserved for industrial, military, or nature conservation purposes."
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#three-good-design-principles",
    "href": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#three-good-design-principles",
    "title": "Take Home Exercise 1",
    "section": "1.7.1 Three Good Design Principles",
    "text": "1.7.1 Three Good Design Principles\n\nClear Comparison Between Groups: Using side-by-side bars for total vs. elderly population enables a quick visual comparison, making it easy to spot which planning areas have larger elderly proportions.\nEffective Use of Color and Labels: The contrasting colors (gold and purple) and direct value labels on bars improve readability and help viewers interpret values without needing to refer to the axis constantly.\nInsightful Focus: Highlighting elderly population (65+) alongside total population adds value by addressing demographic trends — a relevant and important lens for policy and planning."
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#three-areas-for-further-improvement",
    "href": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#three-areas-for-further-improvement",
    "title": "Take Home Exercise 1",
    "section": "1.7.2 Three Areas for Further Improvement",
    "text": "1.7.2 Three Areas for Further Improvement\n\nOverlapping Bars and Misleading Lengths: Since both bars start from the same axis, the elderly population bar is visually “on top of” the total bar, but this could mislead viewers into thinking they are stacked or directly proportional. A grouped bar chart or dual-axis plot might reduce confusion.\nMissing Percentage Context: Including the percentage of elderly population relative to the total for each planning area (e.g., as text labels or a separate line plot) would add deeper insight beyond raw counts.\nVisual Hierarchy Could Be Improved: Right now, the gold bars stand out more than the purple bars, even though the purple ones represent the main variable (total population). Consider reversing this emphasis or softening the elderly bar color to reflect its subset nature."
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#enhanced-visualization",
    "href": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#enhanced-visualization",
    "title": "Take Home Exercise 1",
    "section": "1.7.3 Enhanced Visualization",
    "text": "1.7.3 Enhanced Visualization\nBelow is the improved version of the plot. The enhancements include:\n\nA reversed bar order, with the largest on top for easier scanning.\nBolded key text for title, axis and labels.\nFine-tuned label positions to prevent overlap and improve balance.\nCleaned up legend and theme for a polished look.\n\n\n\nCode\npacman::p_load(tidyverse, haven,\n               ggrepel, ggthemes,\n               ggridges, ggdist,colorspace,ggdist,\n               patchwork, scales, ggplot2, \n               matrixStats, treemapify, showtext)\n\n\n\n\nCode\npop_data &lt;- read_csv(\"respopagesex2024.csv\")\n\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(forcats)\n\npop_data &lt;- read_csv(\"respopagesex2024.csv\")\n\n# Summarise total and elderly population by PA\ntop_areas &lt;- pop_data %&gt;%\n  group_by(PA) %&gt;%\n  summarise(\n    Total = sum(Pop),\n    Elderly = sum(Pop[Age &gt;= 65]),\n    .groups = \"drop\"\n  ) %&gt;%\n  top_n(15, Total)\n\n# Reshape into long format\nplot_data &lt;- top_areas %&gt;%\n  pivot_longer(cols = c(Total, Elderly),\n               names_to = \"Type\",\n               values_to = \"Population\") %&gt;%\n  mutate(\n    Type = recode(Type,\n                  \"Total\" = \"Total Population\",\n                  \"Elderly\" = \"Elderly (65+)\")\n  )\n\n# Reorder PA by Total Population (largest on top)\nplot_data &lt;- plot_data %&gt;%\n  left_join(top_areas %&gt;% select(PA, Total), by = \"PA\") %&gt;%\n  mutate(PA = fct_reorder(PA, Total, .desc = TRUE))\n\n# Plot\nggplot(plot_data, aes(x = PA, y = Population, fill = Type)) +\n  geom_col(position = position_dodge(width = 0.85), width = 0.7) +\n  geom_text(aes(label = comma(Population)),\n            position = position_dodge(width = 0.85),\n            hjust = -0.1, size = 3) +\n  scale_y_continuous(labels = comma, expand = expansion(mult = c(0, 0.15))) +\n  scale_fill_manual(values = c(\"Total Population\" = \"#8E7DBE\", \"Elderly (65+)\" = \"#F1C232\")) +\n  coord_flip() +\n  labs(\n    title = \"Total vs Elderly Population in Top Planning Areas (2024)\",\n    subtitle = \"Planning areas ordered by total population. Elderly population shown in gold.\",\n    x = \"Planning Area\",\n    y = \"Population\",\n    fill = NULL\n  ) +\n  theme_minimal(base_family = \"Helvetica\") +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 15, hjust = 0.5),\n    plot.subtitle = element_text(size = 11, hjust = 0.5, color = \"gray40\"),\n    axis.title = element_text(size = 11),\n    axis.text = element_text(size = 9),\n    legend.position = \"top\",\n    legend.text = element_text(size = 9)\n  )"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html",
    "href": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "Note: Please toggle between ‘Show’ and ‘Hide’ above based on your preference for viewing the R codes."
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#loading-packages",
    "href": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#loading-packages",
    "title": "Take Home Exercise 2",
    "section": "3.1 Loading packages",
    "text": "3.1 Loading packages\nThe following R packages were loaded using the pacman::p_load() function.\n\ntidyverse – Data manipulation and plotting\njsonlite – Parsing JSON files\nSmartEDA – Exploratory data analysis\nggrepel – Prevent overlapping text labels in plots\nggthemes – Additional ggplot2 themes\nggridges / ggdist – Density and distribution plots\ncolorspace / scales – Color and scale customization\ndplyr, lubridate – Tidy data transformation and date handling\npatchwork – Combining multiple ggplots\nmatrixStats – Efficient statistical functions for matrices\ntreemapify – Treemap visualizations\nshowtext – Custom font support in plots\nigraph, ggraph, tidygraph – Network and graph analysis\nnaniar – Missing data visualization\nreadr – Fast CSV and delimited file reading\nvisNetwork – Interactive network graphs\n\n\n\nCode\npacman::p_load(tidyverse, jsonlite, ggrepel, ggdist, lubridate,\n               ggdist, scales, ggplot2, treemapify, igraph, ggraph, \n               tidygraph, readr, visNetwork, ggrepel, janitor, gganimate, dplyr)"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#importing-data",
    "href": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#importing-data",
    "title": "Take Home Exercise 2",
    "section": "3.2 Importing Data",
    "text": "3.2 Importing Data\nWe begin by importing the cleaned knowledge graph from the MC1_graph.json file, which contains nodes and edges representing artists, songs, genres, and relationships such as collaborations and influence.\n\n\nCode\n# Load the JSON file\nkg &lt;- fromJSON(\"MC1/data/MC1_graph.json\")\n\n# Convert to data frames\nnodes_tbl &lt;- bind_rows(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links)\n\ncolnames(nodes_tbl)\n\n\n [1] \"Node Type\"      \"name\"           \"single\"         \"release_date\"  \n [5] \"genre\"          \"notable\"        \"id\"             \"written_date\"  \n [9] \"stage_name\"     \"notoriety_date\"\n\n\nCode\ncolnames(edges_tbl)\n\n\n[1] \"Edge Type\" \"source\"    \"target\"    \"key\"      \n\n\nCode\nstr(nodes_tbl)\n\n\n'data.frame':   17412 obs. of  10 variables:\n $ Node Type     : chr  \"Song\" \"Person\" \"Person\" \"Person\" ...\n $ name          : chr  \"Breaking These Chains\" \"Carlos Duffy\" \"Min Qin\" \"Xiuying Xie\" ...\n $ single        : logi  TRUE NA NA NA NA FALSE ...\n $ release_date  : chr  \"2017\" NA NA NA ...\n $ genre         : chr  \"Oceanus Folk\" NA NA NA ...\n $ notable       : logi  TRUE NA NA NA NA TRUE ...\n $ id            : int  0 1 2 3 4 5 6 7 8 9 ...\n $ written_date  : chr  NA NA NA NA ...\n $ stage_name    : chr  NA NA NA NA ...\n $ notoriety_date: chr  NA NA NA NA ..."
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#distribution-of-edge-types",
    "href": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#distribution-of-edge-types",
    "title": "Take Home Exercise 2",
    "section": "4.1 Distribution of Edge Types",
    "text": "4.1 Distribution of Edge Types\nThe dataset contains a variety of edge types, each representing a specific relationship such as PerformerOf, CollaboratedWith, InspiredBy, and RecordedBy. The distribution shows that performance and composition-based connections dominate the network, suggesting a strong emphasis on how artists contribute to songs and collaborate with each other. Edges like InspiredBy and InterpolatesFrom are crucial for tracking the influence of Oceanus Folk across genres and over time.\n\n\nCode\nggplot(data = edges_tbl, aes(y = `Edge Type`)) + \n  geom_bar(fill = \"#73112d\") +\n  labs(\n    title = \"Distribution of Edge Types\",\n    y = \"Edge Type\",\n    x = \"Count\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#distribution-of-node-types",
    "href": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#distribution-of-node-types",
    "title": "Take Home Exercise 2",
    "section": "4.2 Distribution of Node Types",
    "text": "4.2 Distribution of Node Types\nNodes in the graph are categorized into types such as Person, Song, Genre, RecordLabel, and Album. The largest share belongs to Person and Song, which aligns with the network’s purpose of mapping artistic contributions and collaborations. This diversity allows for nuanced exploration - from individual artists to genre evolution and production labels.\n\n\nCode\nggplot(data = nodes_tbl, aes(y = `Node Type`)) + \n  geom_bar(fill = \"#2d7311\") +\n  labs(\n    title = \"Distribution of Node Types\",\n    y = \"Node Type\",\n    x = \"Count\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#unique-entities-by-node-type",
    "href": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#unique-entities-by-node-type",
    "title": "Take Home Exercise 2",
    "section": "4.3 Unique Entities by Node Type",
    "text": "4.3 Unique Entities by Node Type\nThis breakdown highlights the count of distinct entities within each node type. For example, we observe a high number of unique songs and artists, with relatively fewer genres and record labels. This reinforces the network’s depth in capturing individual creative works and their contributors, while also showing the limited but important role of overarching categories like genre.\n\n\nCode\nnodes_tbl %&gt;%\n  group_by(`Node Type`) %&gt;%\n  summarise(`Number of Entities` = n()) %&gt;%\n  arrange(desc(`Number of Entities`)) %&gt;%\n  ggplot(aes(x = reorder(`Node Type`, `Number of Entities`), y = `Number of Entities`)) +\n  geom_col(fill = \"#112d73\") +\n  coord_flip() +\n  labs(\n    title = \"Number of Unique Entities by Node Type\",\n    x = \"Node Type\",\n    y = \"Count\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#spread-of-oceanus-folks-influence-over-time",
    "href": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#spread-of-oceanus-folks-influence-over-time",
    "title": "Take Home Exercise 2",
    "section": "6.1 Spread of Oceanus Folk’s Influence Over Time",
    "text": "6.1 Spread of Oceanus Folk’s Influence Over Time\nTo assess how the influence of Oceanus Folk evolved, we visualized the number of songs influenced by the genre across different years. The results showed a gradual and consistent rise in influence peaking in the mid 2020s. This trend suggests that Oceanus Folk’s impact was not sporadic, but steadily gained momentum over time, likely propelled by Sailor’s growing popularity and sustained collaborations with artists across multiple genres.\n\n\nCode\nnodes &lt;- read_csv(\"nodes_cleaned.csv\")\n\n# Filter Oceanus Folk songs with valid release dates\noceanus_songs &lt;- nodes %&gt;%\n  filter(node_type == \"Song\", genre == \"Oceanus Folk\", !is.na(release_date))\n\n# Create new column for release year\noceanus_songs &lt;- oceanus_songs %&gt;%\n  mutate(release_year = as.integer(release_date))\n\n# Count number of Oceanus Folk songs per year\nsongs_by_year &lt;- oceanus_songs %&gt;%\n  group_by(release_year) %&gt;%\n  summarise(n = n(), .groups = \"drop\")\n\n# Plot\nggplot(songs_by_year, aes(x = release_year, y = n)) +\n  geom_col(fill = \"#112d73\", width = 0.6) +\n  geom_text(aes(label = n), vjust = -0.3, size = 3, color = \"black\") +\n  scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +\n  labs(\n    title = \"Oceanus Folk Song Releases Over Time\",\n    subtitle = \"Count of Oceanus Folk song releases over the years\",\n    x = \"Release Year\",\n    y = \"Number of Songs\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 14),\n    plot.subtitle = element_text(size = 11),\n    axis.title.y = element_text(margin = margin(r = 10))\n  )\n\n\n\n\n\n\n\n\n\n\n\nCode\nnodes_tbl &lt;- read_csv(\"nodes_cleaned.csv\")\nedges_tbl &lt;- read_csv(\"edges_cleaned.csv\")\nnodes_tbl &lt;- as_tibble(nodes_tbl)\nedges_tbl &lt;- as_tibble(edges_tbl)\n\n# Create ID to index mapping\nid_map &lt;- tibble(id = nodes_tbl$id, index = seq_len(nrow(nodes_tbl)))\n\n# Join mapping to edges\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from_index = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to_index = index) %&gt;%\n  filter(!is.na(from_index), !is.na(to_index))\n\n# Creating graph\ngraph &lt;- tbl_graph(\n  nodes = nodes_tbl,\n  edges = edges_tbl %&gt;% select(from = from_index, to = to_index, everything()),\n  directed = TRUE\n)\n\n# Filter to Oceanus Folk\ngraph_oceanus &lt;- graph %&gt;%\n  activate(nodes) %&gt;%\n  filter(str_detect(genre, \"Oceanus Folk\"))\n\n# Step 7: Visualization\nggraph(graph_oceanus, layout = \"fr\") +\n  geom_edge_link(alpha = 0.2, color = \"gray\") +\n  geom_node_point(aes(color = node_type), size = 3) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 2.5) +\n  theme_void() +\n  labs(title = \"Influence of Oceanus Folk\")\n\n\n\n\n\n\n\n\n\nCode\n# Extract Oceanus Folk node IDs\noceanus_ids &lt;- nodes_tbl %&gt;%\n  filter(str_detect(genre, \"Oceanus Folk\")) %&gt;%\n  pull(id)\n\nedges_oceanus &lt;- edges_tbl %&gt;%\n  filter(source %in% oceanus_ids | target %in% oceanus_ids)\n\n# VisNetwork\nnodes_vis &lt;- nodes_tbl %&gt;%\n  filter(id %in% c(edges_oceanus$source, edges_oceanus$target)) %&gt;%\n  mutate(label = name,\n         title = paste0(\"&lt;b&gt;\", name, \"&lt;/b&gt;&lt;br&gt;Type: \", node_type, \"&lt;br&gt;Genre: \", genre),\n         color = case_when(\n           node_type == \"Person\" ~ \"#112d73\",\n           node_type == \"Song\" ~ \"#2d7311\",\n           node_type == \"Genre\" ~ \"#73112d\",\n           TRUE ~ \"#aaaaaa\"\n         )) %&gt;%\n  select(id, label, title, color)\n\nedges_vis &lt;- edges_oceanus %&gt;%\n  select(from = source, to = target, label = edge_type)\n\nvisNetwork(nodes_vis, edges_vis, width = \"100%\", height = \"700px\") %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 42) %&gt;%\n  visPhysics(stabilization = TRUE) %&gt;%\n  visLegend(addNodes = list(\n    list(label = \"Person\", color = \"#112d73\"),\n    list(label = \"Song\", color = \"#2d7311\"),\n    list(label = \"Genre\", color = \"#73112d\")\n  ), useGroups = FALSE)"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#genres-and-top-artists-influenced-by-oceanus-folk",
    "href": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#genres-and-top-artists-influenced-by-oceanus-folk",
    "title": "Take Home Exercise 2",
    "section": "6.2 Genres and Top Artists Influenced by Oceanus Folk",
    "text": "6.2 Genres and Top Artists Influenced by Oceanus Folk\nWe explored which genres and artists were most influenced by Oceanus Folk by analyzing InspiredBy and InterpolatesFrom edge relationships in the graph. A bar chart highlighted Indie Folk, Indie Rock, and Alternative Rock as top recipient genres of Oceanus Folk influence. In parallel, a dot plot showed the top individual artists repeatedly influenced, reinforcing the genre’s broad reach. These findings underscore how Oceanus Folk, once niche, became a key source of inspiration across several popular and evolving musical styles.\n\n\nCode\nnodes_tbl &lt;- read_csv(\"nodes_cleaned.csv\")\nedges_tbl &lt;- read_csv(\"edges_cleaned.csv\")\nnodes_tbl &lt;- as_tibble(nodes_tbl)\nedges_tbl &lt;- as_tibble(edges_tbl)\n\n# Create ID-to-index map and re-index edges\nid_map &lt;- tibble(id = nodes_tbl$id, index = seq_len(nrow(nodes_tbl)))\n\nleft_join &lt;- dplyr::left_join\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from_index = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to_index = index) %&gt;%\n  filter(!is.na(from_index), !is.na(to_index))\n\n# Create tbl_graph object\ngraph &lt;- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl %&gt;% select(from = from_index, to = to_index, everything()),\n                   directed = TRUE)\n\n# Get Oceanus Folk nodes songs/artists\noceanus_nodes &lt;- nodes_tbl %&gt;%\n  filter(str_detect(genre, regex(\"Oceanus Folk\", ignore_case = TRUE)))\n\n# Influenced edges from Oceanus Folk\ninfluenced_edges &lt;- edges_tbl %&gt;%\n  filter(edge_type %in% c(\"influenced\", \"InterpolatedFrom\", \"InStyleOf\")) %&gt;%\n  filter(source %in% oceanus_nodes$id)\n\ninfluenced_ids &lt;- influenced_edges$target\n\ninfluenced_nodes &lt;- nodes_tbl %&gt;%\n  filter(id %in% influenced_ids)\n\n# Plot graph\ninfluenced_nodes %&gt;%\n  filter(!is.na(genre)) %&gt;%\n  group_by(genre) %&gt;%\n  summarise(n = n()) %&gt;%\n  arrange(desc(n)) %&gt;%\n  slice_max(n, n = 10) %&gt;%\n  ggplot(aes(x = reorder(genre, n), y = n)) +\n  geom_col(fill = \"#73112d\") +\n  coord_flip() +\n  labs(title = \"Top 10 Genres Influenced by Oceanus Folk\",\n       x = \"Genre\", y = \"Number of Influenced Nodes\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nCode\nnodes_graph &lt;- nodes %&gt;%\n  mutate(index = row_number())\n\nedges_graph &lt;- edges %&gt;%\n  left_join(nodes_graph %&gt;% select(id, source_index = index), by = c(\"source\" = \"id\")) %&gt;%\n  left_join(nodes_graph %&gt;% select(id, target_index = index), by = c(\"target\" = \"id\")) %&gt;%\n  filter(!is.na(source_index), !is.na(target_index)) %&gt;%\n  filter(source_index &lt;= nrow(nodes_graph), target_index &lt;= nrow(nodes_graph))\n\ngraph &lt;- tbl_graph(\n  nodes = nodes_graph,\n  edges = edges_graph %&gt;% select(source = source_index, target = target_index, edge_type),\n  directed = TRUE\n)\n\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(aes(color = edge_type), alpha = 0.5) +\n  geom_node_point(aes(color = genre), size = 3) +\n  geom_node_text(aes(label = ifelse(name == \"Sailor Shift\", name, NA)), repel = TRUE, size = 4) +\n  labs(title = \"Oceanus Folk Influence Network\") +\n  theme_void()"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#the-evolution-of-oceanus-folk",
    "href": "TakeHome_Exercises/TakeHome_Ex02/TakeHomeEx02.html#the-evolution-of-oceanus-folk",
    "title": "Take Home Exercise 2",
    "section": "6.3 The Evolution of Oceanus Folk",
    "text": "6.3 The Evolution of Oceanus Folk\nTo understand how Oceanus Folk itself has changed over time, we traced the genres of songs and artists that influenced newer Oceanus Folk tracks. Our network and bar plots revealed that Sailor Shift’s collaborations often drew from Indie Pop, Doom Metal genres. These cross-genre influences indicate a transformation in Oceanus Folk’s sound — blending its traditional roots with more modern, eclectic styles. Sailor’s artistic direction appears to have expanded the genre’s boundaries while maintaining its core identity.\n\n\nCode\n# Load data\nnodes &lt;- read_csv(\"nodes_cleaned.csv\")\nedges &lt;- read_csv(\"edges_cleaned.csv\")\n\n\n# Get Oceanus Folk song IDs\nof_ids &lt;- nodes %&gt;%\n  filter(node_type == \"Song\", genre == \"Oceanus Folk\") %&gt;%\n  pull(id)\n\n# Filter and enrich influence edges with release year\nedges_influence &lt;- edges %&gt;%\n  filter(source %in% of_ids, edge_type %in% c(\"InspiredBy\", \"InterpolatesFrom\")) %&gt;%\n  left_join(nodes %&gt;% select(id, release_date), by = c(\"source\" = \"id\")) %&gt;%\n  mutate(year = floor(as.numeric(release_date))) %&gt;%\n  arrange(year)\n\n# Subset relevant nodes and assign index\nused_ids &lt;- unique(c(edges_influence$source, edges_influence$target))\nnodes_sub &lt;- nodes %&gt;%\n  filter(id %in% used_ids) %&gt;%\n  mutate(index = row_number()) %&gt;%\n  select(index, id, name, node_type, genre, everything())\n\n# Reindex edges using node indices\nedges_sub &lt;- edges_influence %&gt;%\n  left_join(nodes_sub %&gt;% select(id, source_index = index), by = c(\"source\" = \"id\")) %&gt;%\n  left_join(nodes_sub %&gt;% select(id, target_index = index), by = c(\"target\" = \"id\")) %&gt;%\n  filter(!is.na(source_index), !is.na(target_index)) %&gt;%\n  select(source = source_index, target = target_index, edge_type, year)\n\n# Build temporal graph and compute out-degree\ngraph_time &lt;- tbl_graph(nodes = nodes_sub, edges = edges_sub, directed = TRUE) %&gt;%\n  mutate(out_degree = centrality_degree(mode = \"out\"))\n\n# Create animated plot\np &lt;- graph_time %&gt;%\n  activate(edges) %&gt;%\n  mutate(year = factor(year)) %&gt;%\n  ggraph(layout = \"circle\") +\n  geom_edge_link(aes(color = year), alpha = 0.5, arrow = arrow(length = unit(2, 'mm'))) +\n  geom_node_point(aes(size = out_degree, color = node_type), alpha = 0.7) +\n  geom_node_text(\n  aes(label = ifelse(out_degree &gt; quantile(out_degree, 0.90, na.rm = TRUE),\n                     name, NA)),size = 3,repel = TRUE) +\n  scale_color_manual(values = c(\"Person\" = \"#73112D\", \"Song\" = \"#112d73\", \"Genre\" = \"#2d7311\")) +\n  labs(title = \"Influence of Oceanus Folk Over Time: {closest_state}\") +\n  theme_void() +\n  enter_fade() +\n  exit_fade() +\n  transition_states(year, transition_length = 2, state_length = 1)\n\n# Render animation to GIF\n# gif_path &lt;- \"oceanus_influence.gif\"\n# animate(p, renderer = gifski_renderer(gif_path), width = 800, height = 800, fps = 4)\n# cat(sprintf('![](%s)', gif_path))\n\n\n\nThis animated network graph illustrates how songs in the Oceanus Folk genre have influenced other artists and genres over time. Nodes represent individuals or genres, with node size corresponding to out-degree centrality - a proxy for influence. Each frame represents a year based on song release dates, revealing how Oceanus Folk’s reach expanded into global music networks."
  }
]