[
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html",
    "href": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "Introduction & description of the dataset."
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#loading-packages",
    "href": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#loading-packages",
    "title": "Take Home Exercise 1",
    "section": "1.3.1 Loading packages",
    "text": "1.3.1 Loading packages\nWe load the following R packages using the pacman::p_load() function:\n\ntidyverse: Core collection of R packages designed for data science\nhaven: To read in data formats such as SAS and SPSS\nggrepel: to provides geoms for ggplot2 to repel overlapping text labels\nggthemes: to use additional themes for ggplot2\npatchwork: to prepare composite figure created using ggplot2\nggridges: to plot ridgeline plots\nggdist: for visualizations of distributions and uncertainty\nscales: provides the internal scaling infrastructure used by ggplot2"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#importing-data",
    "href": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#importing-data",
    "title": "Take Home Exercise 1",
    "section": "1.3.2 Importing Data",
    "text": "1.3.2 Importing Data\nImporting dataset"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#glimpse",
    "href": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#glimpse",
    "title": "Take Home Exercise 1",
    "section": "1.4.1 Glimpse",
    "text": "1.4.1 Glimpse"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#checking-data-structure",
    "href": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#checking-data-structure",
    "title": "Take Home Exercise 1",
    "section": "1.4.2 Checking data structure",
    "text": "1.4.2 Checking data structure"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#checking-for-duplicate-values",
    "href": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#checking-for-duplicate-values",
    "title": "Take Home Exercise 1",
    "section": "1.4.3 Checking for duplicate values",
    "text": "1.4.3 Checking for duplicate values"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#checking-for-missing-values",
    "href": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#checking-for-missing-values",
    "title": "Take Home Exercise 1",
    "section": "1.4.4 Checking for missing values",
    "text": "1.4.4 Checking for missing values"
  },
  {
    "objectID": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#filtering-data-for-selected-variables",
    "href": "TakeHome_Exercises/TakeHome_Ex01/TakeHomeEx01.html#filtering-data-for-selected-variables",
    "title": "Take Home Exercise 1",
    "section": "1.4.5 Filtering data for selected variables",
    "text": "1.4.5 Filtering data for selected variables"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04/HandsOnEx04.html",
    "href": "HandsOn_Exercises/HandsOn_Ex04/HandsOnEx04.html",
    "title": "Hands On Exercise 4",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04/HandsOnEx04.html#basic-concepts-of-animation",
    "href": "HandsOn_Exercises/HandsOn_Ex04/HandsOnEx04.html#basic-concepts-of-animation",
    "title": "Hands On Exercise 4",
    "section": "",
    "text": "When creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04/HandsOnEx04.html#terminology",
    "href": "HandsOn_Exercises/HandsOn_Ex04/HandsOnEx04.html#terminology",
    "title": "Hands On Exercise 4",
    "section": "",
    "text": "Before we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04/HandsOnEx04.html#loading-the-r-packages",
    "href": "HandsOn_Exercises/HandsOn_Ex04/HandsOnEx04.html#loading-the-r-packages",
    "title": "Hands On Exercise 4",
    "section": "4.2.1 Loading the R packages",
    "text": "4.2.1 Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04/HandsOnEx04.html#importing-the-data",
    "href": "HandsOn_Exercises/HandsOn_Ex04/HandsOnEx04.html#importing-the-data",
    "title": "Hands On Exercise 4",
    "section": "4.2.2 Importing the data",
    "text": "4.2.2 Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04/HandsOnEx04.html#building-a-static-population-bubble-plot",
    "href": "HandsOn_Exercises/HandsOn_Ex04/HandsOnEx04.html#building-a-static-population-bubble-plot",
    "title": "Hands On Exercise 4",
    "section": "4.3.1 Building a static population bubble plot",
    "text": "4.3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04/HandsOnEx04.html#building-the-animated-bubble-plot",
    "href": "HandsOn_Exercises/HandsOn_Ex04/HandsOnEx04.html#building-the-animated-bubble-plot",
    "title": "Hands On Exercise 4",
    "section": "4.3.2 Building the animated bubble plot",
    "text": "4.3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04/HandsOnEx04.html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "HandsOn_Exercises/HandsOn_Ex04/HandsOnEx04.html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "Hands On Exercise 4",
    "section": "4.4.1 Building an animated bubble plot: ggplotly() method",
    "text": "4.4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex04/HandsOnEx04.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "HandsOn_Exercises/HandsOn_Ex04/HandsOnEx04.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "Hands On Exercise 4",
    "section": "4.4.2 Building an animated bubble plot: plot_ly() method",
    "text": "4.4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex02/HandsOnEx02.html",
    "href": "HandsOn_Exercises/HandsOn_Ex02/HandsOnEx02.html",
    "title": "Hands On Exercise 2",
    "section": "",
    "text": "There are several ggplot2 extensions for creating more elegant and effective statistical graphics. Let’s explore these features!\n\nGetting Started\nBesides tidyverse, four R packages will be used.\n\nggrepel: to provide geoms for ggplot2 to repel overlapping text labels\nggthemes: to provide extra themes, geoms, and scales for ‘ggplot2’\nhrbrthemes: for typography-centric themes and theme components for ggplot2\npatchwork: for preparing composite figure created using ggplot2\n\nTo check if these packages have been installed and to load them into your working R environment, run the code below.\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse)\n\n\n\nImporting Data\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. \n\nexam_data &lt;- read_csv(\"Exam_data.csv\")\nshow_col_types = FALSE\nknitr::kable(head(exam_data))\n\n\n\n\nID\nCLASS\nGENDER\nRACE\nENGLISH\nMATHS\nSCIENCE\n\n\n\n\nStudent321\n3I\nMale\nMalay\n21\n9\n15\n\n\nStudent305\n3I\nFemale\nMalay\n24\n22\n16\n\n\nStudent289\n3H\nMale\nChinese\n26\n16\n16\n\n\nStudent227\n3F\nMale\nChinese\n27\n77\n31\n\n\nStudent318\n3I\nMale\nMalay\n27\n11\n25\n\n\nStudent306\n3I\nFemale\nMalay\n31\n16\n16\n\n\n\n\n\n\n\nWhat is ggrepel?\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points. Take a look below and see it for yourself.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\nknitr::opts_chunk$set(warning = FALSE)\n\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\nknitr::opts_chunk$set(warning = FALSE)\n\n\n\nThemes\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"#630e27\") +\n  theme_dark() +\n  ggtitle(\"Distribution of Maths Scores\") \n\n\n\n\n\n\n\nknitr::opts_chunk$set(warning = FALSE)\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"#630e27\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\nknitr::opts_chunk$set(warning = FALSE)\n\n\n\nCombining Graphs\nLet’s create three graphs named p1, p2 and p3.\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"#630e27\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\nknitr::opts_chunk$set(warning = FALSE)\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"black\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\nknitr::opts_chunk$set(warning = FALSE)\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\nknitr::opts_chunk$set(warning = FALSE)\n\nPatchwork is a ggplot2 extension designed to combine separate ggplot2 graphs into a single figure. Here’s the syntax.\n\n“/” operator to stack two ggplot2 graphs\n“|” operator to place the plots beside each other\n“()” operator the define the sequence of the plotting\n\n\np1 + p2\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork\n\n\n\n\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(stringr::str_wrap(\"English scores versus Maths scores for Primary 3\", width = 30)) +\n  theme_wsj() +\n  theme(plot.title = element_text(hjust = 0.5, size = 15, face = \"bold\"))"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex01/HandsOnEx01.html",
    "href": "HandsOn_Exercises/HandsOn_Ex01/HandsOnEx01.html",
    "title": "Hands On Exercise 1",
    "section": "",
    "text": "The code below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\nshow_col_types = FALSE\n\nknitr::kable(head(exam_data))\n\n\n\n\nID\nCLASS\nGENDER\nRACE\nENGLISH\nMATHS\nSCIENCE\n\n\n\n\nStudent321\n3I\nMale\nMalay\n21\n9\n15\n\n\nStudent305\n3I\nFemale\nMalay\n24\n22\n16\n\n\nStudent289\n3H\nMale\nChinese\n26\n16\n16\n\n\nStudent227\n3F\nMale\nChinese\n27\n77\n31\n\n\nStudent318\n3I\nMale\nMalay\n27\n11\n25\n\n\nStudent306\n3I\nFemale\nMalay\n31\n16\n16"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex01/HandsOnEx01.html#installing-r-packages",
    "href": "HandsOn_Exercises/HandsOn_Ex01/HandsOnEx01.html#installing-r-packages",
    "title": "Hands On Exercise 1",
    "section": "",
    "text": "The code below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex01/HandsOnEx01.html#importing-data",
    "href": "HandsOn_Exercises/HandsOn_Ex01/HandsOnEx01.html#importing-data",
    "title": "Hands On Exercise 1",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")\nshow_col_types = FALSE\n\nknitr::kable(head(exam_data))\n\n\n\n\nID\nCLASS\nGENDER\nRACE\nENGLISH\nMATHS\nSCIENCE\n\n\n\n\nStudent321\n3I\nMale\nMalay\n21\n9\n15\n\n\nStudent305\n3I\nFemale\nMalay\n24\n22\n16\n\n\nStudent289\n3H\nMale\nChinese\n26\n16\n16\n\n\nStudent227\n3F\nMale\nChinese\n27\n77\n31\n\n\nStudent318\n3I\nMale\nMalay\n27\n11\n25\n\n\nStudent306\n3I\nFemale\nMalay\n31\n16\n16"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex01/HandsOnEx01.html#data",
    "href": "HandsOn_Exercises/HandsOn_Ex01/HandsOnEx01.html#data",
    "title": "Hands On Exercise 1",
    "section": "Data",
    "text": "Data\nFirst, let’s call the ggplot() function using the below code.\n\nggplot(data=exam_data)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex01/HandsOnEx01.html#aesthetic-mappings",
    "href": "HandsOn_Exercises/HandsOn_Ex01/HandsOnEx01.html#aesthetic-mappings",
    "title": "Hands On Exercise 1",
    "section": "Aesthetic mappings",
    "text": "Aesthetic mappings\n\nggplot(data=exam_data, \n       aes(x= MATHS))"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex01/HandsOnEx01.html#geom",
    "href": "HandsOn_Exercises/HandsOn_Ex01/HandsOnEx01.html#geom",
    "title": "Hands On Exercise 1",
    "section": "Geom",
    "text": "Geom\nGeometric objects are the actual marks we put on a plot. A plot must have at least one geom and there is no upper limit. You can add a geom to a plot using the + operator.\nExamples include:\n\ngeom_point() for drawing individual points (e.g., a scatter plot)\ngeom_line() for drawing lines (e.g., for a line charts)\ngeom_bar() for drawing bars (e.g., for bar charts)\ngeom_jitter() to add a small amount of random variation to the location of each point\ngeom_map() for drawing polygons in the shape of a map!"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html",
    "href": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html",
    "title": "Hands On Exercise 3",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands On Exercise 3",
    "section": "3.4.1 Tooltip effect with tooltip aesthetic",
    "text": "3.4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#displaying-multiple-information-on-tooltip",
    "href": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#displaying-multiple-information-on-tooltip",
    "title": "Hands On Exercise 3",
    "section": "3.5.1 Displaying multiple information on tooltip",
    "text": "3.5.1 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#customising-tooltip-style",
    "href": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#customising-tooltip-style",
    "title": "Hands On Exercise 3",
    "section": "3.6.1 Customising Tooltip style",
    "text": "3.6.1 Customising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)   \n\n\n\n\n\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#displaying-statistics-on-tooltip",
    "href": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#displaying-statistics-on-tooltip",
    "title": "Hands On Exercise 3",
    "section": "3.6.2 Displaying statistics on tooltip",
    "text": "3.6.2 Displaying statistics on tooltip\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#hover-effect-with-data_id-aesthetic",
    "href": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#hover-effect-with-data_id-aesthetic",
    "title": "Hands On Exercise 3",
    "section": "3.6.3 Hover effect with data_id aesthetic",
    "text": "3.6.3 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n3.6.4 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)   \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n3.6.5 Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n) \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#click-effect-with-onclick",
    "href": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#click-effect-with-onclick",
    "title": "Hands On Exercise 3",
    "section": "3.6.6 Click effect with onclick",
    "text": "3.6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)    \n\n\n\n\n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\nNote that click actions must be a string column in the dataset containing valid javascript instructions."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#coordinated-multiple-views-with-ggiraph",
    "href": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands On Exercise 3",
    "section": "3.6.7 Coordinated Multiple Views with ggiraph",
    "text": "3.6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\nAppropriate interactive functions of ggiraph will be used to create the multiple views. patchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "Hands On Exercise 3",
    "section": "3.7.1 Creating an interactive scatter plot: plot_ly() method",
    "text": "3.7.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#working-with-visual-variable-plot_ly-method",
    "href": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#working-with-visual-variable-plot_ly-method",
    "title": "Hands On Exercise 3",
    "section": "3.7.2 Working with visual variable: plot_ly() method",
    "text": "3.7.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "href": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "title": "Hands On Exercise 3",
    "section": "3.7.3 Creating an interactive scatter plot: ggplotly() method",
    "text": "3.7.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#coordinated-multiple-views-with-plotly",
    "href": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#coordinated-multiple-views-with-plotly",
    "title": "Hands On Exercise 3",
    "section": "3.7.4 Coordinated Multiple Views with plotly",
    "text": "3.7.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\nhighlight_key() of plotly package is used as shared data. two scatterplots will be created by using ggplot2 functions. lastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\nThing to learn from the code chunk:\nhighlight_key() simply creates an object of class crosstalk::SharedData. Visit this link to learn more about crosstalk."
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#interactive-data-table-dt-package-a-wrapper-of-the-javascript-library-datatables",
    "href": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#interactive-data-table-dt-package-a-wrapper-of-the-javascript-library-datatables",
    "title": "Hands On Exercise 3",
    "section": "3.8.1 Interactive Data Table: DT package A wrapper of the JavaScript Library DataTables",
    "text": "3.8.1 Interactive Data Table: DT package A wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#linked-brushing-crosstalk-method",
    "href": "HandsOn_Exercises/HandsOn_Ex03/HandsOnEx03.html#linked-brushing-crosstalk-method",
    "title": "Hands On Exercise 3",
    "section": "3.8.2 Linked brushing: crosstalk method",
    "text": "3.8.2 Linked brushing: crosstalk method\nCode chunk below is used to implement the coordinated brushing shown above.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk:\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visual Analytics & Applications",
    "section": "",
    "text": "Welcome to ISSS608: Visual Analytics & Applications!\nThis website showcases my learning journey for this course in the AY2024–25 April taught by Professor Kam Tin Seong at SMU. The course explores how visualizations can turn raw data into meaningful insights, using tools like Quarto for web-based reporting and Tableau for interactive dashboards. Throughout the semester, I’ll be sharing my coursework, projects, and reflections here — so stay tuned as this site evolves!\nI’m currently a full-time business analyst and a part-time MITB student, with a keen interest in data storytelling and analytics. My goal is to pivot into a data science role, combining analytical techniques with strong business intuition to solve real-world problems. When I’m not coding or studying, you can usually find me at the gym, painting on a quiet weekend, or planning my next travel adventure. Feel free to explore my site!"
  },
  {
    "objectID": "index.html#welcome-to-isss608-visual-analytics-applications",
    "href": "index.html#welcome-to-isss608-visual-analytics-applications",
    "title": "Visual Analytics & Applications",
    "section": "",
    "text": "This website showcases my learning journey for this course in the AY2024–25 April taught by Professor Kam Tin Seong at SMU. The course explores how visualizations can turn raw data into meaningful insights, using tools like Quarto for web-based reporting and Tableau for interactive dashboards. Throughout the semester, I’ll be sharing my coursework, projects, and reflections here — so stay tuned as this site evolves!\nI’m currently a full-time business analyst and a part-time MITB student, with a keen interest in data storytelling and analytics. My goal is to pivot into a data science role, combining analytical techniques with strong business intuition to solve real-world problems. When I’m not coding or studying, you can usually find me at the gym, painting on a quiet weekend, or planning my next travel adventure. Feel free to explore my site!"
  }
]