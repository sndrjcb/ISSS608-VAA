{
  "hash": "acf6752717fe7015fd6553f646bada44",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands On Exercise 8C\"\nsubtitle: \"Analytical Mapping\"\nformat: html\ndate: 06/09/2025\ndate-format: long\ndate-modified: last-modified\neditor: visual\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n[*Note: Please toggle between 'Show' and 'Hide' above based on your preference for viewing the R codes.*]{.underline}\n\n# 8.1 Overview\n\n## 8.1.1 Objectives\n\nIn this in-class exercise, you will gain hands-on experience on using appropriate R methods to plot analytical maps.\n\n## 8.1.2 Learning Outcome\n\nBy the end of this in-class exercise, you will be able to use appropriate functions of tmap and tidyverse to perform the following tasks:\n\n-   Importing geospatial data in rds format into R environment.\n\n-   Creating cartographic quality choropleth maps by using appropriate tmap functions.\n\n-   Creating rate map\n\n-   Creating percentile map\n\n-   Creating boxmap\n\n# 8.2 Getting Started\n\n## 8.2.1 Installing and loading Packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tmap, tidyverse, sf)\n```\n:::\n\n\n\n## 8.2.2 Importing Data\n\nFor the purpose of this hands-on exercise, a prepared data set called *NGA_wp.rds* will be used. The data set is a polygon feature data.frame providing information on water point of Nigeria at the LGA level. You can find the data set in the *rds* sub-direct of the hands-on *data* folder.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNGA_wp <- read_rds(\"data/rds/NGA_wp.rds\")\n```\n:::\n\n\n\n# 8.3 Basic Choropleth Mapping\n\n## 8.3.1 Visualising distribution of non-functional water point\n\nPloting a choropleth map showing the distribution of non-function water point by LGA.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- tm_shape(NGA_wp) +\n  tm_polygons(fill = \"wp_functional\",\n             fill.scale = tm_scale_intervals(\n               style = \"equal\",\n               n = 10,\n               values = \"brewer.blues\"),\n             fill.legend = tm_legend(\n               position = c(\"right\", \"bottom\"))) +\n  tm_borders(lwd = 0.1,\n             fill_alpha = 1) +\n  tm_title(\"Distribution of functional water point by LGAs\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np2 <- tm_shape(NGA_wp) + \n  tm_polygons(fill = \"total_wp\", \n              fill.scale = tm_scale_intervals(\n                style = \"equal\",\n                n = 10,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                position = c(\"right\", \"bottom\"))) +\n  tm_borders(lwd = 0.1, \n             fill_alpha = 1) + \n  tm_title(\"Distribution of total  water point by LGAs\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_arrange(p2, p1, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](HandsOnEx08C_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n# 8.4 Choropleth Map for Rates\n\nIn much of our readings we have now seen the importance to map rates rather than counts of things, and that is for the simple reason that water points are not equally distributed in space. That means that if we do not account for how many water points are somewhere, we end up mapping total water point size rather than our topic of interest.\n\n## 8.4.1 Deriving Proportion of Functional Water Points and Non-Functional Water Points\n\nWe will tabulate the proportion of functional water points and the proportion of non-functional water points in each LGA. In the following code chunk, `mutate(`) from **dplyr** package is used to derive two fields, namely *pct_functional* and *pct_nonfunctional*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNGA_wp <- NGA_wp %>%\n  mutate(pct_functional = wp_functional/total_wp) %>%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n```\n:::\n\n\n\n## 8.4.2 Plotting map of rate\n\nPlotting a choropleth map showing the distribution of percentage functional water point by LGA.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(NGA_wp) +\n  tm_polygons(\"pct_functional\",\n              fill.scale = tm_scale_intervals(\n                style = \"equal\",\n                n = 10,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                position = c(\"right\", \"bottom\"))) + \n  tm_borders(lwd = 0.1,\n             fill_alpha = 1) +\n  tm_title(\"Rate map of functional water point by LGAs\")\n```\n\n::: {.cell-output-display}\n![](HandsOnEx08C_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n# 8.5 Extreme Value Maps\n\nExtreme value maps are variations of common choropleth maps where the classification is designed to highlight extreme values at the lower and upper end of the scale, with the goal of identifying outliers. These maps were developed in the spirit of spatializing EDA, i.e., adding spatial features to commonly used approaches in non-spatial EDA (Anselin 1994).\n\n## 8.5.1 Percentile Map\n\nThe percentile map is a special type of quantile map with six specific categories: 0-1%,1-10%, 10-50%,50-90%,90-99%, and 99-100%. The corresponding breakpoints can be derived by means of the base R quantile command, passing an explicit vector of cumulative probabilities as c(0,.01,.1,.5,.9,.99,1). Note that the begin and endpoint need to be included.\n\n### 8.5.1.1 Data Preparation\n\n**Step 1**: Exclude records with NA by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNGA_wp <- NGA_wp %>%   \n  drop_na()\n```\n:::\n\n\n\n**Step 2**: Creating customised classification and extracting values\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npercent <- c(0,.01,.1,.5,.9,.99,1)\nvar <- NGA_wp[\"pct_functional\"] %>%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n```\n\n\n:::\n:::\n\n\n\nWhen variables are extracted from an sf data.frame, the geometry is extracted as well. For mapping and spatial manipulation, this is the expected behavior, but many base R functions cannot deal with the geometry. Specifically, the `quantile()` gives an error. As a result `st_set_geomtry(NULL)` is used to drop geomtry field.\n\n### 8.5.1.2 Why writing functions?\n\nWriting a function has three big advantages over using copy-and-paste:\n\n-   You can give a function an evocative name that makes your code easier to understand.\n\n-   As requirements change, you only need to update code in one place, instead of many.\n\n-   You eliminate the chance of making incidental mistakes when you copy and paste (i.e. updating a variable name in one place, but not in another).\n\nSource: [Chapter 19: Functions](https://r4ds.had.co.nz/functions.html#functions) of **R for Data Science**.\n\n### 8.5.1.3 Creating the get.var function\n\nFirstly, we will write an R function as shown below to extract a variable (i.e. *wp_nonfunctional*) as a vector out of an sf data.frame.\n\n-   arguments:\n\n    -   vname: variable name (as character, in quotes)\n\n    -   df: name of sf data frame\n\n-   returns:\n\n    -   v: vector with values (without a column name)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget.var <- function(vname,df) {\n  v <- df[vname] %>% \n    st_set_geometry(NULL)\n  v <- unname(v[,1])\n  return(v)\n}\n```\n:::\n\n\n\n### 8.5.1.4 A percentile mapping function\n\nNext, we will write a percentile mapping function by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npercentmap <- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent <- c(0,.01,.1,.5,.9,.99,1)\n  var <- get.var(vnam, df)\n  bperc <- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_polygons(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"< 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"> 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n```\n:::\n\n\n\n### 8.5.1.5 Test drive the percentile mapping function\n\nTo run the function, type the code chunk as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npercentmap(\"total_wp\", NGA_wp)\n```\n\n::: {.cell-output-display}\n![](HandsOnEx08C_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\nNote that this is just a bare bones implementation. Additional arguments such as the title, legend positioning just to name a few of them, could be passed to customise various features of the map.\n",
    "supporting": [
      "HandsOnEx08C_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}