{
  "hash": "07d1077d6411a2b33492920121af3c16",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands On Exercise 6\"\nsubtitle: \"Visualising and Analysing Time-oriented Data\"\nformat: html\ndate: 05/18/2025\ndate-format: long\ndate-modified: last-modified\neditor: visual\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n[*Note: Please toggle between 'Show' and 'Hide' above based on your preference for viewing the R codes.*]{.underline}\n\n# 6.1 Learning Outcome\n\nBy the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\n-   plotting a calender heatmap by using ggplot2 functions,\n\n-   plotting a cycle plot by using ggplot2 function,\n\n-   plotting a slopegraph\n\n-   plotting a horizon chart\n\n# 6.2 Installing and launching R packages\n\nLet's install and launch the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(scales, viridis, lubridate, ggthemes,\ngridExtra, readxl, knitr, data.table,\nCGPfunctions, ggHoriPlot, tidyverse)\n```\n:::\n\n\n\n# 6.3 Plotting Calendar Heatmap\n\nIn this section, you will learn how to plot a calendar heatmap programmatically by using ggplot2 package. By the end of this section, you will be able to:\n\n-   plot a calendar heatmap by using ggplot2 functions and extensions.\n\n-   to write functions using R programming.\n\n-   to derive specific dates and time-related fields by using base R and lubridate packages.\n\n-   to perform data preparation tasks by using tidyr and dplyr packages.\n\n## 6.3.1 Importing Data\n\nFirst, you will use the code chunk below to import *eventlog.csv* file into R environment and called the data frame as *attacks*. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks <- read_csv(\"data/eventlog.csv\")\n```\n:::\n\n\n\n## 6.3.2 Examining the Data Structure\n\nIt is always a good practice to examine the imported data frame before further analysis is performed. For example, *kable()* can be used to review the structure of the imported data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n\n\n|timestamp           |source_country |tz              |\n|:-------------------|:--------------|:---------------|\n|2015-03-12 15:59:16 |CN             |Asia/Shanghai   |\n|2015-03-12 16:00:48 |FR             |Europe/Paris    |\n|2015-03-12 16:02:26 |CN             |Asia/Shanghai   |\n|2015-03-12 16:02:38 |US             |America/Chicago |\n|2015-03-12 16:03:22 |CN             |Asia/Shanghai   |\n|2015-03-12 16:03:45 |CN             |Asia/Shanghai   |\n\n\n:::\n:::\n\n\n\nThere are three columns, namely *timestamp*, *source_country* and *tz*.\n\n-   *timestamp* field stores date-time values in POSIXct format.\n\n-   *source_country* field stores the source of the attack. It is in *ISO 3166-1 alpha-2* country code.\n\n-   *tz* field stores time zone of the source IP address.\n\n## 6.3.3 Data Preparation\n\n**Step 1: Deriving *weekday* and *hour of day* fields**\n\nBefore we can plot the calender heatmap, two new fields namely *wkday* and *hour* need to be derived. In this step, we will write a function to perform the task. [`ymd_hms()`](https://lubridate.tidyverse.org/reference/ymd_hms.html) and [`hour()`](https://lubridate.tidyverse.org/reference/hour.html) are from [**lubridate**](https://lubridate.tidyverse.org/) package, and [`weekdays()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/weekdays) is a base R function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_hr_wkday <- function(ts, sc, tz) \n{\n  real_times <- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt <- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n}\n```\n:::\n\n\n\n**Step 2: Deriving the attacks tibble data frame**\n\nBeside extracting the necessary data into *attacks* data frame, `mutate()` of **dplyr** package is used to convert *wkday* and *hour* fields into **factor** so they’ll be ordered when plotting.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwkday_levels <- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks <- attacks %>%\n  group_by(tz) %>%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %>% \n  ungroup() %>% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n```\n:::\n\n\n\nThe table below shows the tidy tibble table after processing.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n\n\n|tz           |source_country |wkday    |hour |\n|:------------|:--------------|:--------|:----|\n|Africa/Cairo |BG             |Saturday |20   |\n|Africa/Cairo |TW             |Sunday   |6    |\n|Africa/Cairo |TW             |Sunday   |8    |\n|Africa/Cairo |CN             |Sunday   |11   |\n|Africa/Cairo |US             |Sunday   |15   |\n|Africa/Cairo |CA             |Monday   |11   |\n\n\n:::\n:::\n\n\n\n## 6.3.4 Building a Calendar Heatmap\n\nA tibble data table called *grouped* is derived by aggregating the attack by *wkday* and *hour* fields. A new field called *n* is derived by using `group_by()` and `count()` functions. `na.omit()` is used to exclude missing value. `geom_tile()` is used to plot tiles (grids) at each x and y position. `color` and `size` arguments are used to specify the border color and line size of the tiles. [`theme_tufte()`](https://jrnold.github.io/ggthemes/reference/theme_tufte.html) of [**ggthemes**](https://jrnold.github.io/ggthemes/reference/index.html) package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\n\n-   `coord_equal()` is used to ensure the plot will have an aspect ratio of 1:1.\n\n-   `scale_fill_gradient()` function is used to creates a two colour gradient (low-high).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped <- attacks %>% \n  count(wkday, hour) %>% \n  ungroup() %>%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n```\n\n::: {.cell-output-display}\n![](HandsOnEx06_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## 6.3.5 Plotting Multiple Calendar Heatmaps\n\n**Step 1: Deriving attack by country object**\n\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the following:\n\n-   count the number of attacks by country,\n\n-   calculate the percent of attacks by country, and\n\n-   save the results in a tibble data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks_by_country <- count(\n  attacks, source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>%\n  arrange(desc(n))\n```\n:::\n\n\n\n**Step 2: Preparing the tidy data frame**\n\nIn this step, you are required to extract the attack records of the top 4 countries from *attacks* data frame and save the data in a new tibble data frame (i.e. *top4_attacks*).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop4 <- attacks_by_country$source_country[1:4]\ntop4_attacks <- attacks %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%\n  ungroup() %>%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %>%\n  na.omit()\n```\n:::\n\n\n\n## 6.3.6 Plotting Multiple Calendar Heatmaps\n\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )\n```\n\n::: {.cell-output-display}\n![](HandsOnEx06_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n# 6.4 Plotting a Cycle Plot\n\nIn this section, you will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n## 6.4.1 Importing Data\n\nFor the purpose of this hands-on exercise, *arrivals_by_air.xlsx* will be used. The code below imports *arrivals_by_air.xlsx* by using `read_excel()` of **readxl** package and save it as a tibble data frame called *air*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nair <- read_excel(\"data/arrivals_by_air.xlsx\")\n```\n:::\n\n\n\n## 6.4.2 Deriving month and year fields\n\nNext, two new fields called *month* and *year* are derived from *Month-Year* field.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nair$month <- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year <- year(ymd(air$`Month-Year`))\n```\n:::\n\n\n\n## 6.4.3 Extracting the target country\n\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVietnam <- air %>% \n  select(`Vietnam`, \n         month, \n         year) %>%\n  filter(year >= 2010)\n```\n:::\n\n\n\n## 6.4.4 Computing year average arrivals by month\n\nThe code chunk below uses `group_by()` and `summarise()` of **dplyr** to compute year average arrivals by month.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhline.data <- Vietnam %>% \n  group_by(month) %>%\n  summarise(avgvalue = mean(`Vietnam`))\n```\n:::\n\n\n\n## 6.4.5 Plotting a Cycle Plot\n\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")\n```\n\n::: {.cell-output-display}\n![](HandsOnEx06_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n# 6.5 Plotting a Slopegraph\n\nIn this section you will learn how to plot a [slopegraph](https://www.storytellingwithdata.com/blog/2020/7/27/what-is-a-slopegraph) by using R.\n\nBefore getting start, make sure that **CGPfunctions** has been installed and loaded onto R environment. Then, refer to [Using newggslopegraph](https://cran.r-project.org/web/packages/CGPfunctions/vignettes/Using-newggslopegraph.html) to learn more about the function. Lastly, read more about `newggslopegraph()` and its arguments by referring to this [link](https://www.rdocumentation.org/packages/CGPfunctions/versions/0.6.3/topics/newggslopegraph).\n\n### 6.5.1 Importing Data\n\nImport the rice data set into R environment by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice <- read_csv(\"data/rice.csv\")\n```\n:::\n\n\n\n### 6.5.2 Plotting a Slopegraph\n\nNext, code chunk below will be used to plot a basic slopegraph as shown below. For effective data visualisation design, `factor()` is used convert the value type of *Year* field from numeric to factor.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice %>% \n  mutate(Year = factor(Year)) %>%\n  filter(Year %in% c(1961, 1980)) %>%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\")\n```\n\n::: {.cell-output-display}\n![](HandsOnEx06_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n# 6.6 Trying Out Plots on my Own\n\n## 6.6.1 Slopegraph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice %>% \n  mutate(Year = factor(Year)) %>%\n  filter(Year %in% c(1961, 1980)) %>%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                XTextSize = 18,    # Size of the times\n                YTextSize = 2,     # Size of the groups\n                TitleTextSize = 14,\n                SubTitleTextSize = 12,\n                CaptionTextSize = 10,\n                Caption = \"RICE\",\n                TitleJustify = \"right\",\n                SubTitleJustify = \"right\",\n                CaptionJustify = \"left\",\n                DataTextSize = 2.5,\n                DataLabelPadding = 0.2,\n                DataLabelLineSize = 0.5,\n                DataLabelFillColor = \"lightblue\",\n                ThemeChoice = \"wsj\")\n```\n\n::: {.cell-output-display}\n![](HandsOnEx06_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n## 6.6.2 Cycle Plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Vietnam, aes(x = year, y = `Vietnam`, group = month)) + \n  geom_line(color = \"black\") +\n  geom_hline(data = hline.data, aes(yintercept = avgvalue),\n             linetype = \"dashed\", color = \"red\", size = 0.5) +\n  facet_wrap(~month, nrow = 2) +\n  labs(\n    title = \"Visitor Arrivals from Vietnam by Air (2010–2019)\",\n    subtitle = \"Each line represents yearly visitor counts for a specific month. Red dashed line shows 10-year monthly average.\",\n    y = \"No. of Visitors\",\n    x = NULL\n  ) +\n  theme_tufte(base_family = \"Helvetica\") +\n  theme(\n    strip.text = element_text(size = 10, face = \"bold\"),\n    axis.text.x = element_blank(),\n    axis.ticks.x = element_blank(),\n    plot.title = element_text(face = \"bold\", size = 14, hjust = 0.5),\n    plot.subtitle = element_text(size = 10, hjust = 0.5, color = \"gray30\")\n  )\n```\n\n::: {.cell-output-display}\n![](HandsOnEx06_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n## 6.6.3 Calendar Heat Map\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped <- attacks %>% \n  count(wkday, hour) %>% \n  ungroup() %>%\n  na.omit()\n\nggplot(grouped, aes(x = hour, y = fct_rev(wkday), fill = n)) + \n  geom_tile(color = \"white\", size = 0.2) +\n  scale_fill_gradient(\n    name = \"# of Attacks\",\n    low = \"#f7c8d6\",\n    high = \"#300713\"\n  ) +\n  coord_equal() +\n  labs(\n    title = \"Attacks by Weekday and Time of Day\",\n    subtitle = \"Count of attacks by hour across weekdays\",\n    x = \"Hour of Day\",\n    y = NULL\n  ) +\n  theme_minimal(base_family = \"Helvetica\") +\n  theme(\n    panel.grid = element_blank(),\n    axis.ticks = element_blank(),\n    axis.text.y = element_text(size = 9),\n    axis.text.x = element_text(size = 9),\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(size = 10, hjust = 0.5, color = \"gray30\"),\n    legend.title = element_text(size = 9, face = \"bold\"),\n    legend.text = element_text(size = 8),\n    legend.position = \"bottom\"\n  )\n```\n\n::: {.cell-output-display}\n![](HandsOnEx06_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n## 6.6.4 Time Series using ggplot2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvietnam_ts <- Vietnam %>%\n  mutate(\n    date = ymd(paste(year, month, 1, sep = \"-\")),\n    visitors = Vietnam,\n    deviation = visitors - mean(visitors, na.rm = TRUE)\n  )\n\nggplot(vietnam_ts, aes(x = date)) +\n  geom_area(data = subset(vietnam_ts, deviation >= 0),\n            aes(y = deviation), fill = \"#e41a1c\") +  # red for above avg\n  geom_area(data = subset(vietnam_ts, deviation < 0),\n            aes(y = deviation), fill = \"#377eb8\") +  # blue for below avg\n  geom_hline(yintercept = 0, color = \"gray40\", linetype = \"dashed\") +\n  scale_x_date(date_breaks = \"6 months\", date_labels = \"%b %Y\") +\n  labs(\n    title = \"Visitor Arrivals from Vietnam (Deviation from Mean)\",\n    subtitle = \"Red indicates months above average, blue indicates below\",\n    y = \"Deviation from Average\",\n    x = NULL\n  ) +\n  theme_minimal(base_family = \"Helvetica\") +\n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5, size = 10, color = \"gray40\"),\n    axis.text.x = element_text(size = 8)\n  )\n```\n\n::: {.cell-output-display}\n![](HandsOnEx06_files/figure-html/unnamed-chunk-21-1.png){width=1152}\n:::\n:::\n",
    "supporting": [
      "HandsOnEx06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}