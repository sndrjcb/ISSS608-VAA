{
  "hash": "bdfc6c724ef928e3f13595bc250b4780",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 3\"\nsubtitle: \"Storyboard\"\nformat: html\ndate: 06/10/2025\ndate-format: long\ndate-modified: last-modified\neditor: visual\nexecute:\n  eval: false\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n[*Note: Please toggle between 'Show' and 'Hide' above based on your preference for viewing the R codes.*]{.underline}\n\n# 3.1 Introduction\n\nOur Shiny prototype application explores the musical impact and future trajectory of Oceanus Folk, a genre popularized by global artist Sailor Shift. Using a knowledge graph composed of interconnected artists, songs, genres, and influences, the dashboard aims to uncover the genreâ€™s growth, spread, and influence over time.\n\nThe application is organized into three interactive modules:\n\n1.  **Exploratory Data Analysis (EDA):** Enables users to examine the composition and evolution of the Oceanus Folk ecosystem through bar charts, pie charts, and an interactive visNetwork graph.\n\n2.  **Statistical Analysis:** Presents confirmatory insights about the influence of Oceanus Folk, showing how genres and artists have evolved alongside statistical trends and test results.\n\n3.  **Predictive Analysis:** Forecasts the future of emerging artists and genres using basic models such as logistic regression and decision trees, along with an artist trajectory simulator.\n\nThe primary goal of this dashboard is to provide users with an intuitive interface for navigating a complex knowledge graph and draw meaningful conclusions from it.\n\n# 3.2 Packages\n\nThe Shiny application leverages the following R packages:\n\n-   **`shiny`** â€“ Framework to build interactive web applications.\n\n-   **`shinyWidgets`** â€“ Enhanced input widgets like sliders, selectors, and toggles.\n\n-   **`tidyverse`** â€“ Collection of packages for data manipulation and visualization (`dplyr`, `ggplot2`, `readr`, etc.).\n\n-   **`visNetwork`** â€“ Interactive visualization of network graphs using JavaScript under the hood.\n\n-   **`igraph`** â€“ Provides centrality metrics and graph algorithms for network data.\n\n-   **`tidygraph`** â€“ Tidy API for graph manipulation compatible with `dplyr` verbs.\n\n-   **`ggraph`** â€“ Grammar of graphics for networks (used in earlier static visualizations).\n\n-   **`ggplot2`** â€“ Core plotting engine for bar charts, line plots, and statistical visualizations.\n\n-   **`lubridate`** â€“ Simplifies working with dates and times.\n\n-   **`broom`** â€“ Tidies statistical model output for interpretation and display.\n\n# 3.3 Storyboard\n\n## 3.3.1 Exploratory Data Analysis (EDA)\n\n### Purpose\n\nTo provide an interactive overview of the Oceanus Folk ecosystem, including its core components - artists, genres, songs, and how they are interconnected over time.\n\n### Key Features\n\n-   **Bar Chart**: Number of Oceanus Folk songs released per year.\n\n-   **Stacked Bar Chart**: Distribution of genres over time to track diversity and changes in music style.\n\n-   **Interactive visNetwork Graph**: Explore the influence network visually with tooltips and filtering options by genre and year.\n\n-   **Sidebar Controls**: Allow users to filter by selected genres and adjust year ranges to refine the visualizations.\n\n### UI Screen\n\nThis module helps users intuitively explore the growth and composition of Oceanus Folk, discover artist or genre clusters, and understand the structural spread of influence through the music network.\n\n![](images/clipboard-1799932030.jpeg)\n\n### Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n  titlePanel(\"Exploratory Data Analysis: Oceanus Folk Knowledge Graph\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"genre_select\", \"Select Genre:\",\n                  choices = NULL, multiple = TRUE),\n      \n      sliderInput(\"year_range\", \"Select Year Range:\",\n                  min = 2000, max = 2040, value = c(2020, 2040), sep = \"\")\n    ),\n    \n    mainPanel(\n      tabsetPanel(\n        tabPanel(\"Bar Charts\",\n                 plotOutput(\"songs_by_year\"),\n                 plotOutput(\"genres_over_time\")\n        ),\n        \n        tabPanel(\"Composition\",\n                 plotOutput(\"node_composition\")\n        ),\n        \n        tabPanel(\"Network Graph\",\n                 visNetworkOutput(\"network_graph\", height = \"600px\")\n        )\n      )\n    )\n  )\n)\nserver <- function(input, output, session) {\n  \n  # Dynamic filtering based on genre and year\n  filtered_nodes <- reactive({\n    req(nodes)\n    nodes %>%\n      filter(is.na(genre) | genre %in% input$genre_selector) %>%\n      filter(is.na(release_date) | between(as.numeric(release_date), input$year_range[1], input$year_range[2]))\n  })\n  \n  filtered_edges <- reactive({\n    req(edges)\n    edges %>%\n      filter(source %in% filtered_nodes()$id & target %in% filtered_nodes()$id)\n  })\n  \n  # Oceanus Folk Songs by Year\n  output$song_release_plot <- renderPlot({\n    oceanus_songs <- nodes %>%\n      filter(genre == \"Oceanus Folk\", !is.na(release_date)) %>%\n      mutate(year = as.integer(release_date)) %>%\n      count(year)\n    \n    ggplot(oceanus_songs, aes(x = year, y = n)) +\n      geom_col(fill = \"#1f78b4\") +\n      labs(title = \"Oceanus Folk Songs Released by Year\", x = \"Year\", y = \"Number of Songs\") +\n      theme_minimal()\n  })\n  \n  # Genre Distribution Over Time\n  output$genre_dist_plot <- renderPlot({\n    genre_dist <- nodes %>%\n      filter(!is.na(genre), !is.na(release_date)) %>%\n      mutate(year = as.integer(release_date)) %>%\n      count(year, genre)\n    \n    ggplot(genre_dist, aes(x = year, y = n, fill = genre)) +\n      geom_col() +\n      labs(title = \"Genre Distribution Over Time\", x = \"Year\", y = \"Count\") +\n      theme_minimal()\n  })\n  \n  # Node Type Composition Pie Chart\n  output$node_type_pie <- renderPlot({\n    node_type_count <- nodes %>%\n      count(node_type)\n    \n    ggplot(node_type_count, aes(x = \"\", y = n, fill = node_type)) +\n      geom_col(width = 1) +\n      coord_polar(theta = \"y\") +\n      theme_void() +\n      labs(title = \"Node Type Composition\")\n  })\n  \n  # Interactive visNetwork Graph\n  output$eda_network <- renderVisNetwork({\n    req(filtered_nodes(), filtered_edges())\n    \n    visNetwork(filtered_nodes(), filtered_edges()) %>%\n      visNodes(shape = \"dot\", size = 10) %>%\n      visEdges(arrows = \"to\") %>%\n      visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%\n      visLayout(randomSeed = 42)\n  })\n}\n```\n:::\n\n\n\n## 3.3.2 Statistical Analysis\n\n### Purpose\n\nTo provide confirmatory insights into the evolution of Oceanus Folkâ€™s influence across the music industry using statistical modeling and centrality metrics.\n\n### 3.3.2.1 Network Centrality Explorer\n\nThe goal is to identify key influencers, whether artists, genres, or songs, within the network.\n\n#### Key Features\n\n-   **Centrality Type Selector**: Out-degree, In-degree, Betweenness, Eigenvector.\n\n-   **Node Type Filter**: Focus on Artists, Songs, Genres, or view all.\n\n-   **Top-N Slider**: Choose how many top influencers to display (e.g., Top 10).\n\n-   **Interactive Table**: Displays node metadata with centrality scores.\n\n-   **Dot Plot**: Visualizes rankings with hoverable data points.\n\n-   **Node Summary Panel**: View expanded information about selected nodes (e.g., *Sailor Shift* or Oceanus Folk genre hubs).\n\n#### UI Screen\n\n![](images/clipboard-4029118883.jpeg)\n\n#### Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sample placeholder graph (replace with your real tbl_graph)\nsample_graph <- play_gnp(n = 30, p = 0.1, directed = TRUE) %>%\n  as_tbl_graph() %>%\n  mutate(name = paste(\"Node\", 1:n()),\n         node_type = sample(c(\"Artist\", \"Song\", \"Genre\"), n(), replace = TRUE))\n\nui <- fluidPage(\n  titlePanel(\"ðŸŽµ Network Centrality Explorer\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"centrality_type\", \"Select Centrality Type:\",\n                  choices = c(\"Out-degree\", \"In-degree\", \"Betweenness\", \"Eigenvector\")),\n      \n      radioButtons(\"node_filter\", \"Filter by Node Type:\",\n                   choices = c(\"All\", \"Artist\", \"Song\", \"Genre\"), inline = TRUE),\n      \n      sliderInput(\"top_n\", \"Top N Influencers:\", min = 5, max = 30, value = 10)\n    ),\n    \n    mainPanel(\n      DTOutput(\"centrality_table\"),\n      plotOutput(\"centrality_plot\", click = \"plot_click\"),\n      uiOutput(\"node_summary\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  reactive_graph <- reactive({\n    g <- sample_graph\n    \n    # Calculate centrality based on user input\n    V(g)$centrality <- switch(input$centrality_type,\n                              \"Out-degree\" = degree(g, mode = \"out\"),\n                              \"In-degree\" = degree(g, mode = \"in\"),\n                              \"Betweenness\" = betweenness(g),\n                              \"Eigenvector\" = evcent(g)$vector\n    )\n    \n    g\n  })\n  \n  filtered_data <- reactive({\n    g <- reactive_graph()\n    g_tbl <- as_tibble(g)\n    \n    g_tbl <- g_tbl %>%\n      mutate(centrality = V(g)$centrality)\n    \n    if (input$node_filter != \"All\") {\n      g_tbl <- g_tbl %>% filter(node_type == input$node_filter)\n    }\n    \n    g_tbl %>% arrange(desc(centrality)) %>% slice_head(n = input$top_n)\n  })\n  \n  output$centrality_table <- renderDT({\n    datatable(filtered_data(), options = list(pageLength = 5))\n  })\n  \n  output$centrality_plot <- renderPlot({\n    ggplot(filtered_data(), aes(x = reorder(name, centrality), y = centrality)) +\n      geom_point(shape = 4, size = 4, color = \"blue\") +\n      coord_flip() +\n      labs(title = paste(\"Top\", input$top_n, input$node_filter, \"by\", input$centrality_type),\n           x = \"\", y = \"Centrality Score\") +\n      theme_minimal()\n  })\n  \n  output$node_summary <- renderUI({\n    click <- input$plot_click\n    if (is.null(click)) return(NULL)\n    \n    nearest <- nearPoints(filtered_data(), click, xvar = \"name\", yvar = \"centrality\", threshold = 20, maxpoints = 1)\n    if (nrow(nearest) == 0) return(NULL)\n    \n    wellPanel(\n      h4(\"Node Summary\"),\n      p(strong(\"Name: \"), nearest$name),\n      p(strong(\"Node Type: \"), nearest$node_type),\n      p(strong(\"Centrality Score: \"), round(nearest$centrality, 3))\n    )\n  })\n}\n\nshinyApp(ui, server)\n```\n:::\n\n\n\n### 3.3.2.2 Influence Over Time\n\nThe goal is to examine how the influence of Oceanus Folk has evolved across years using statistical trends and hypothesis testing.\n\n#### Key Features\n\n-   **Year Range Slider**: Set temporal scope from 2000â€“2040.\n\n-   **Edge Type Selector**: Choose which influence types to include (e.g., *InspiredBy*, *InterpolatesFrom*).\n\n-   **Time Series Plot**: Displays yearly counts of influenced nodes (songs/artists).\n\n-   **Trendline Toggle**: Adds a fitted linear model to observe growth patterns.\n\n-   **Statistical Output Panel**: Presents the result of a linear regression (and potentially other tests like Mann-Kendall) to verify significant trends.\n\n#### UI Screen\n\n![](images/clipboard-230101287.jpeg)\n\n#### Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n  titlePanel(\"Oceanus Folk Influence Over Time\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"year_range\", \"Select Year Range:\",\n                  min = 2000, max = 2040,\n                  value = c(2000, 2040), step = 1,\n                  sep = \"\"),\n      \n      checkboxGroupInput(\"edge_types\", \"Edge Types to Include:\",\n                         choices = c(\"InspiredBy\", \"InterpolatesFrom\", \"InStyleOf\"),\n                         selected = c(\"InspiredBy\", \"InterpolatesFrom\")),\n      \n      checkboxInput(\"show_trend\", \"Show Trendline\", value = TRUE),\n      actionButton(\"run_test\", \"Run Statistical Test\")\n    ),\n    \n    mainPanel(\n      plotOutput(\"influence_plot\", click = \"plot_click\"),\n      verbatimTextOutput(\"stat_test_result\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  # Reactive expression for filtered data (placeholder)\n  filtered_data <- reactive({\n    tibble(\n      year = 2000:2040,\n      count = sample(10:100, 41, replace = TRUE)\n    ) %>%\n      filter(year >= input$year_range[1], year <= input$year_range[2])\n  })\n  \n  output$influence_plot <- renderPlot({\n    data <- filtered_data()\n    \n    p <- ggplot(data, aes(x = year, y = count)) +\n      geom_line(color = \"#2C3E50\") +\n      geom_point(color = \"#18BC9C\") +\n      labs(title = \"Influence of Oceanus Folk Over Time\",\n           x = \"Year\",\n           y = \"Number of Influenced Nodes\") +\n      theme_minimal()\n    \n    if (input$show_trend) {\n      p <- p + geom_smooth(method = \"lm\", se = FALSE, linetype = \"dashed\", color = \"#E74C3C\")\n    }\n    \n    p\n  })\n  \n  output$stat_test_result <- renderPrint({\n    input$run_test  # trigger test on button press\n    \n    isolate({\n      data <- filtered_data()\n      model <- lm(count ~ year, data = data)\n      summary(model)\n    })\n  })\n}\n\nshinyApp(ui, server)\n```\n:::\n\n\n\n## 3.3.3 Predictive Analysis\n\n### Purpose\n\nTo simulate future outcomes for lesser-known artists or genres based on historical influence patterns using simplified predictive models.\n\n### Key Features\n\n-   **User Input**: Choose whether to analyze by Artist or Genre.\n\n-   **Dynamic Field**: Enter the name of the artist or genre to simulate.\n\n-   **Model Selection**: Toggle between Logistic Regression and Decision Tree for prediction.\n\n-   **Genre Projection Plot**: Visualizes expected influence growth over time.\n\n-   **Model Result Panel**: Displays prediction outcome based on input and selected model.\n\n-   **Artist Trajectory Simulator**: Simulates a future popularity trajectory (e.g., 2025â€“2040) based on influence links, genre, and collaborations.\n\n### UI Screen\n\n![](images/clipboard-1828832303.jpeg)\n\n### Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n  titlePanel(\"Predictive Analysis: Future Trends in Oceanus Folk\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"input_type\", \"Select Input Type:\",\n                  choices = c(\"Artist\", \"Genre\")),\n      \n      uiOutput(\"dynamic_input\"),\n      \n      radioButtons(\"model_type\", \"Choose Prediction Model:\",\n                   choices = c(\"Logistic Regression\", \"Decision Tree\"),\n                   selected = \"Logistic Regression\"),\n      \n      checkboxInput(\"show_projection\", \"Show Genre Growth Projection\", value = TRUE)\n    ),\n    \n    mainPanel(\n      conditionalPanel(\n        condition = \"input.show_projection == true\",\n        plotOutput(\"genre_projection\")\n      ),\n      \n      verbatimTextOutput(\"model_results\"),\n      \n      h4(\"Simulated Artist Trajectory\"),\n      plotOutput(\"artist_trajectory\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  # Dynamically update input field\n  output$dynamic_input <- renderUI({\n    if (input$input_type == \"Artist\") {\n      textInput(\"user_input\", \"Enter Artist Name:\", value = \"\")\n    } else {\n      textInput(\"user_input\", \"Enter Genre Name:\", value = \"\")\n    }\n  })\n  \n  # Placeholder projection plot\n  output$genre_projection <- renderPlot({\n    years <- 2025:2040\n    growth <- cumsum(runif(length(years), min = 0, max = 10))\n    plot(years, growth, type = \"l\", col = \"steelblue\", lwd = 2,\n         xlab = \"Year\", ylab = \"Projected Influence\",\n         main = \"Projected Genre Influence Over Time\")\n  })\n  \n  # Placeholder model results\n  output$model_results <- renderPrint({\n    paste(\"Model Type:\", input$model_type,\n          \"\\nInput:\", input$user_input,\n          \"\\nPrediction: Likely to rise in popularity\")\n  })\n  \n  # Placeholder artist trajectory simulation\n  output$artist_trajectory <- renderPlot({\n    timeline <- 2025:2040\n    popularity <- cumsum(runif(length(timeline), min = 0, max = 5))\n    plot(timeline, popularity, type = \"o\", col = \"darkgreen\",\n         xlab = \"Year\", ylab = \"Simulated Popularity\",\n         main = paste(\"Trajectory for\", input$user_input))\n  })\n  \n}\n```\n:::\n\n\n\n# 3.4 Conclusion\n\nThis Shiny application offers a comprehensive analytical environment to explore, understand, and forecast the evolution of Oceanus Folk within the music industry. Through these modules, the dashboard bridges intuitive visual exploration with robust statistical reasoning and forward-looking simulation. By enabling users to dissect historical patterns, identify key influencers, and simulate future trajectories, this application serves as a powerful decision-support and storytelling tool.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}